
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000456c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f0  080046f0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080046f0  080046f0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046f0  080046f0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080046f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000090  08004788  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08004788  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc80  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b5  00000000  00000000  0002bd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0002def0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  0002ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183b0  00000000  00000000  0002f980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eae6  00000000  00000000  00047d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008add6  00000000  00000000  00056816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e15ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b8c  00000000  00000000  000e163c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08004660 	.word	0x08004660

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08004660 	.word	0x08004660

0800014c <Off_Buzzer>:
uint8_t index_task_temp_1;
uint8_t index_task_temp_2;

uint8_t	is_P_Light_On = 0;

void Off_Buzzer(void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	BUZZER_VOLUME = 0;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <Off_Buzzer+0x14>)
 8000152:	2200      	movs	r2, #0
 8000154:	701a      	strb	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	200000b6 	.word	0x200000b6

08000164 <Pedestrian_Control>:
////		time_1 (red) decreases => BUZZER_VOLUME increases
//	}
//	else BUZZER_VOLUME = 0;
//
//}
void Pedestrian_Control(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	is_P_Light_On = 1;
 8000168:	4b16      	ldr	r3, [pc, #88]	; (80001c4 <Pedestrian_Control+0x60>)
 800016a:	2201      	movs	r2, #1
 800016c:	701a      	strb	r2, [r3, #0]
	if(mode_auto_1 == RED){
 800016e:	4b16      	ldr	r3, [pc, #88]	; (80001c8 <Pedestrian_Control+0x64>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	2b01      	cmp	r3, #1
 8000174:	d11f      	bne.n	80001b6 <Pedestrian_Control+0x52>
		Light_P_Green();
 8000176:	f000 fe11 	bl	8000d9c <Light_P_Green>

		if(time_1 * 100 / TIME_RED < 50) BUZZER_VOLUME = time_1 * 100 / TIME_RED;
 800017a:	4b14      	ldr	r3, [pc, #80]	; (80001cc <Pedestrian_Control+0x68>)
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	461a      	mov	r2, r3
 8000180:	2364      	movs	r3, #100	; 0x64
 8000182:	fb02 f303 	mul.w	r3, r2, r3
 8000186:	4a12      	ldr	r2, [pc, #72]	; (80001d0 <Pedestrian_Control+0x6c>)
 8000188:	7812      	ldrb	r2, [r2, #0]
 800018a:	fb93 f3f2 	sdiv	r3, r3, r2
 800018e:	2b31      	cmp	r3, #49	; 0x31
 8000190:	dc0d      	bgt.n	80001ae <Pedestrian_Control+0x4a>
 8000192:	4b0e      	ldr	r3, [pc, #56]	; (80001cc <Pedestrian_Control+0x68>)
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	461a      	mov	r2, r3
 8000198:	2364      	movs	r3, #100	; 0x64
 800019a:	fb02 f303 	mul.w	r3, r2, r3
 800019e:	4a0c      	ldr	r2, [pc, #48]	; (80001d0 <Pedestrian_Control+0x6c>)
 80001a0:	7812      	ldrb	r2, [r2, #0]
 80001a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80001a6:	b2da      	uxtb	r2, r3
 80001a8:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <Pedestrian_Control+0x70>)
 80001aa:	701a      	strb	r2, [r3, #0]
	else {
//		traffic light: AMBER or GREEN
		Light_P_Red();
		BUZZER_VOLUME = 0;
	}
}
 80001ac:	e008      	b.n	80001c0 <Pedestrian_Control+0x5c>
		else BUZZER_VOLUME = 0;
 80001ae:	4b09      	ldr	r3, [pc, #36]	; (80001d4 <Pedestrian_Control+0x70>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	701a      	strb	r2, [r3, #0]
}
 80001b4:	e004      	b.n	80001c0 <Pedestrian_Control+0x5c>
		Light_P_Red();
 80001b6:	f000 fddd 	bl	8000d74 <Light_P_Red>
		BUZZER_VOLUME = 0;
 80001ba:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <Pedestrian_Control+0x70>)
 80001bc:	2200      	movs	r2, #0
 80001be:	701a      	strb	r2, [r3, #0]
}
 80001c0:	bf00      	nop
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	200000b5 	.word	0x200000b5
 80001c8:	200000ae 	.word	0x200000ae
 80001cc:	200000b1 	.word	0x200000b1
 80001d0:	20000000 	.word	0x20000000
 80001d4:	200000b6 	.word	0x200000b6

080001d8 <Delete_Pedestrian_Control>:
void Delete_Pedestrian_Control(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
//	delete Pedestrian_Control + buzzer_control
//	SCH_Delete_Task_NAME(Buzzer_Control);
	SCH_Delete_Task_NAME(Pedestrian_Control);
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <Delete_Pedestrian_Control+0x1c>)
 80001de:	f000 ff45 	bl	800106c <SCH_Delete_Task_NAME>

	Light_P_Off();
 80001e2:	f000 fdb3 	bl	8000d4c <Light_P_Off>
	Off_Buzzer();
 80001e6:	f7ff ffb1 	bl	800014c <Off_Buzzer>
	is_P_Light_On = 0;
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <Delete_Pedestrian_Control+0x20>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	701a      	strb	r2, [r3, #0]

}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	08000165 	.word	0x08000165
 80001f8:	200000b5 	.word	0x200000b5

080001fc <fsm_for_manual_1>:


void fsm_for_manual_1(void){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	switch(mode_manual_1){
 8000200:	4b1d      	ldr	r3, [pc, #116]	; (8000278 <fsm_for_manual_1+0x7c>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	2b03      	cmp	r3, #3
 8000206:	d833      	bhi.n	8000270 <fsm_for_manual_1+0x74>
 8000208:	a201      	add	r2, pc, #4	; (adr r2, 8000210 <fsm_for_manual_1+0x14>)
 800020a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020e:	bf00      	nop
 8000210:	08000221 	.word	0x08000221
 8000214:	08000229 	.word	0x08000229
 8000218:	08000241 	.word	0x08000241
 800021c:	08000259 	.word	0x08000259
	case INIT_LIGHT:
		mode_manual_1 = RED;
 8000220:	4b15      	ldr	r3, [pc, #84]	; (8000278 <fsm_for_manual_1+0x7c>)
 8000222:	2201      	movs	r2, #1
 8000224:	701a      	strb	r2, [r3, #0]
		break;
 8000226:	e024      	b.n	8000272 <fsm_for_manual_1+0x76>
	case RED:
		if(is_button_pressed(BUTTON_1)) mode_manual_1 = AMBER;
 8000228:	2000      	movs	r0, #0
 800022a:	f000 faef 	bl	800080c <is_button_pressed>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <fsm_for_manual_1+0x3e>
 8000234:	4b10      	ldr	r3, [pc, #64]	; (8000278 <fsm_for_manual_1+0x7c>)
 8000236:	2202      	movs	r2, #2
 8000238:	701a      	strb	r2, [r3, #0]
		Light_1_Red();
 800023a:	f000 fd1b 	bl	8000c74 <Light_1_Red>
		break;
 800023e:	e018      	b.n	8000272 <fsm_for_manual_1+0x76>
	case AMBER:
		if(is_button_pressed(BUTTON_1)) mode_manual_1 = GREEN;
 8000240:	2000      	movs	r0, #0
 8000242:	f000 fae3 	bl	800080c <is_button_pressed>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d002      	beq.n	8000252 <fsm_for_manual_1+0x56>
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <fsm_for_manual_1+0x7c>)
 800024e:	2203      	movs	r2, #3
 8000250:	701a      	strb	r2, [r3, #0]
		Light_1_Amber();
 8000252:	f000 fd23 	bl	8000c9c <Light_1_Amber>
		break;
 8000256:	e00c      	b.n	8000272 <fsm_for_manual_1+0x76>
	case GREEN:
		if(is_button_pressed(BUTTON_1)) mode_manual_1 = RED;
 8000258:	2000      	movs	r0, #0
 800025a:	f000 fad7 	bl	800080c <is_button_pressed>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d002      	beq.n	800026a <fsm_for_manual_1+0x6e>
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <fsm_for_manual_1+0x7c>)
 8000266:	2201      	movs	r2, #1
 8000268:	701a      	strb	r2, [r3, #0]
		Light_1_Green();
 800026a:	f000 fd2b 	bl	8000cc4 <Light_1_Green>
		break;
 800026e:	e000      	b.n	8000272 <fsm_for_manual_1+0x76>
	default:
		break;
 8000270:	bf00      	nop
	}
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	200000ac 	.word	0x200000ac

0800027c <fsm_for_manual_2>:
void fsm_for_manual_2(void){
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	switch(mode_manual_2){
 8000280:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <fsm_for_manual_2+0x7c>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b03      	cmp	r3, #3
 8000286:	d833      	bhi.n	80002f0 <fsm_for_manual_2+0x74>
 8000288:	a201      	add	r2, pc, #4	; (adr r2, 8000290 <fsm_for_manual_2+0x14>)
 800028a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800028e:	bf00      	nop
 8000290:	080002a1 	.word	0x080002a1
 8000294:	080002a9 	.word	0x080002a9
 8000298:	080002c1 	.word	0x080002c1
 800029c:	080002d9 	.word	0x080002d9
	case INIT_LIGHT:
		mode_manual_2 = RED;
 80002a0:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <fsm_for_manual_2+0x7c>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	701a      	strb	r2, [r3, #0]
		break;
 80002a6:	e024      	b.n	80002f2 <fsm_for_manual_2+0x76>
	case RED:
		if(is_button_pressed(BUTTON_2)) mode_manual_2 = AMBER;
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 faaf 	bl	800080c <is_button_pressed>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d002      	beq.n	80002ba <fsm_for_manual_2+0x3e>
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <fsm_for_manual_2+0x7c>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	701a      	strb	r2, [r3, #0]
		Light_2_Red();
 80002ba:	f000 fd17 	bl	8000cec <Light_2_Red>
		break;
 80002be:	e018      	b.n	80002f2 <fsm_for_manual_2+0x76>
	case AMBER:
		if(is_button_pressed(BUTTON_2)) mode_manual_2 = GREEN;
 80002c0:	2001      	movs	r0, #1
 80002c2:	f000 faa3 	bl	800080c <is_button_pressed>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d002      	beq.n	80002d2 <fsm_for_manual_2+0x56>
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <fsm_for_manual_2+0x7c>)
 80002ce:	2203      	movs	r2, #3
 80002d0:	701a      	strb	r2, [r3, #0]
		Light_2_Amber();
 80002d2:	f000 fd1b 	bl	8000d0c <Light_2_Amber>
		break;
 80002d6:	e00c      	b.n	80002f2 <fsm_for_manual_2+0x76>
	case GREEN:
		if(is_button_pressed(BUTTON_2)) mode_manual_2 = RED;
 80002d8:	2001      	movs	r0, #1
 80002da:	f000 fa97 	bl	800080c <is_button_pressed>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d002      	beq.n	80002ea <fsm_for_manual_2+0x6e>
 80002e4:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <fsm_for_manual_2+0x7c>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	701a      	strb	r2, [r3, #0]
		Light_2_Green();
 80002ea:	f000 fd1f 	bl	8000d2c <Light_2_Green>
		break;
 80002ee:	e000      	b.n	80002f2 <fsm_for_manual_2+0x76>
	default:
		break;
 80002f0:	bf00      	nop
	}
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	200000ad 	.word	0x200000ad

080002fc <fsm_for_auto_1>:

void fsm_for_auto_1(void){				//this function is invoked every 1s
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	switch(mode_auto_1){
 8000300:	4b2c      	ldr	r3, [pc, #176]	; (80003b4 <fsm_for_auto_1+0xb8>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b03      	cmp	r3, #3
 8000306:	d851      	bhi.n	80003ac <fsm_for_auto_1+0xb0>
 8000308:	a201      	add	r2, pc, #4	; (adr r2, 8000310 <fsm_for_auto_1+0x14>)
 800030a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030e:	bf00      	nop
 8000310:	08000321 	.word	0x08000321
 8000314:	08000335 	.word	0x08000335
 8000318:	0800035d 	.word	0x0800035d
 800031c:	08000385 	.word	0x08000385
	case INIT_LIGHT:
		time_1 = TIME_RED;
 8000320:	4b25      	ldr	r3, [pc, #148]	; (80003b8 <fsm_for_auto_1+0xbc>)
 8000322:	781a      	ldrb	r2, [r3, #0]
 8000324:	4b25      	ldr	r3, [pc, #148]	; (80003bc <fsm_for_auto_1+0xc0>)
 8000326:	701a      	strb	r2, [r3, #0]
		Light_1_Red();
 8000328:	f000 fca4 	bl	8000c74 <Light_1_Red>
		mode_auto_1 = RED;
 800032c:	4b21      	ldr	r3, [pc, #132]	; (80003b4 <fsm_for_auto_1+0xb8>)
 800032e:	2201      	movs	r2, #1
 8000330:	701a      	strb	r2, [r3, #0]
		break;
 8000332:	e03c      	b.n	80003ae <fsm_for_auto_1+0xb2>
	case RED:
		if(time_1 == 0){
 8000334:	4b21      	ldr	r3, [pc, #132]	; (80003bc <fsm_for_auto_1+0xc0>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d108      	bne.n	800034e <fsm_for_auto_1+0x52>
			time_1 = TIME_GREEN;
 800033c:	4b20      	ldr	r3, [pc, #128]	; (80003c0 <fsm_for_auto_1+0xc4>)
 800033e:	781a      	ldrb	r2, [r3, #0]
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <fsm_for_auto_1+0xc0>)
 8000342:	701a      	strb	r2, [r3, #0]
			Light_1_Green();
 8000344:	f000 fcbe 	bl	8000cc4 <Light_1_Green>
			mode_auto_1 = GREEN;
 8000348:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <fsm_for_auto_1+0xb8>)
 800034a:	2203      	movs	r2, #3
 800034c:	701a      	strb	r2, [r3, #0]
		}
		time_1--;
 800034e:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <fsm_for_auto_1+0xc0>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	3b01      	subs	r3, #1
 8000354:	b2da      	uxtb	r2, r3
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <fsm_for_auto_1+0xc0>)
 8000358:	701a      	strb	r2, [r3, #0]
		break;
 800035a:	e028      	b.n	80003ae <fsm_for_auto_1+0xb2>
	case AMBER:
		if(time_1 == 0){
 800035c:	4b17      	ldr	r3, [pc, #92]	; (80003bc <fsm_for_auto_1+0xc0>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d108      	bne.n	8000376 <fsm_for_auto_1+0x7a>
			time_1 = TIME_RED;
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <fsm_for_auto_1+0xbc>)
 8000366:	781a      	ldrb	r2, [r3, #0]
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <fsm_for_auto_1+0xc0>)
 800036a:	701a      	strb	r2, [r3, #0]
			Light_1_Red();
 800036c:	f000 fc82 	bl	8000c74 <Light_1_Red>
			mode_auto_1 = RED;
 8000370:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <fsm_for_auto_1+0xb8>)
 8000372:	2201      	movs	r2, #1
 8000374:	701a      	strb	r2, [r3, #0]
		}
		time_1--;
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <fsm_for_auto_1+0xc0>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	3b01      	subs	r3, #1
 800037c:	b2da      	uxtb	r2, r3
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <fsm_for_auto_1+0xc0>)
 8000380:	701a      	strb	r2, [r3, #0]
		break;
 8000382:	e014      	b.n	80003ae <fsm_for_auto_1+0xb2>
	case GREEN:
		if(time_1 == 0){
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <fsm_for_auto_1+0xc0>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d108      	bne.n	800039e <fsm_for_auto_1+0xa2>
			time_1 = TIME_AMBER;
 800038c:	4b0d      	ldr	r3, [pc, #52]	; (80003c4 <fsm_for_auto_1+0xc8>)
 800038e:	781a      	ldrb	r2, [r3, #0]
 8000390:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <fsm_for_auto_1+0xc0>)
 8000392:	701a      	strb	r2, [r3, #0]
			Light_1_Amber();
 8000394:	f000 fc82 	bl	8000c9c <Light_1_Amber>
			mode_auto_1 = AMBER;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <fsm_for_auto_1+0xb8>)
 800039a:	2202      	movs	r2, #2
 800039c:	701a      	strb	r2, [r3, #0]
		}
		time_1--;
 800039e:	4b07      	ldr	r3, [pc, #28]	; (80003bc <fsm_for_auto_1+0xc0>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <fsm_for_auto_1+0xc0>)
 80003a8:	701a      	strb	r2, [r3, #0]
		break;
 80003aa:	e000      	b.n	80003ae <fsm_for_auto_1+0xb2>
	default:
		break;
 80003ac:	bf00      	nop
	}
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000ae 	.word	0x200000ae
 80003b8:	20000000 	.word	0x20000000
 80003bc:	200000b1 	.word	0x200000b1
 80003c0:	20000002 	.word	0x20000002
 80003c4:	20000001 	.word	0x20000001

080003c8 <fsm_for_auto_2>:
void fsm_for_auto_2(void){				//this function is invoked every 1s
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	switch(mode_auto_2){
 80003cc:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <fsm_for_auto_2+0xb8>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d851      	bhi.n	8000478 <fsm_for_auto_2+0xb0>
 80003d4:	a201      	add	r2, pc, #4	; (adr r2, 80003dc <fsm_for_auto_2+0x14>)
 80003d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003da:	bf00      	nop
 80003dc:	080003ed 	.word	0x080003ed
 80003e0:	08000401 	.word	0x08000401
 80003e4:	08000429 	.word	0x08000429
 80003e8:	08000451 	.word	0x08000451
	case INIT_LIGHT:
		time_2 = TIME_GREEN;
 80003ec:	4b25      	ldr	r3, [pc, #148]	; (8000484 <fsm_for_auto_2+0xbc>)
 80003ee:	781a      	ldrb	r2, [r3, #0]
 80003f0:	4b25      	ldr	r3, [pc, #148]	; (8000488 <fsm_for_auto_2+0xc0>)
 80003f2:	701a      	strb	r2, [r3, #0]
		Light_2_Green();
 80003f4:	f000 fc9a 	bl	8000d2c <Light_2_Green>
		mode_auto_2 = GREEN;
 80003f8:	4b21      	ldr	r3, [pc, #132]	; (8000480 <fsm_for_auto_2+0xb8>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	701a      	strb	r2, [r3, #0]
		break;
 80003fe:	e03c      	b.n	800047a <fsm_for_auto_2+0xb2>
	case RED:
		if(time_2 == 0){
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <fsm_for_auto_2+0xc0>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d108      	bne.n	800041a <fsm_for_auto_2+0x52>
			time_2 = TIME_GREEN;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <fsm_for_auto_2+0xbc>)
 800040a:	781a      	ldrb	r2, [r3, #0]
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <fsm_for_auto_2+0xc0>)
 800040e:	701a      	strb	r2, [r3, #0]
			Light_2_Green();
 8000410:	f000 fc8c 	bl	8000d2c <Light_2_Green>
			mode_auto_2 = GREEN;
 8000414:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <fsm_for_auto_2+0xb8>)
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]
		}
		time_2--;
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <fsm_for_auto_2+0xc0>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	3b01      	subs	r3, #1
 8000420:	b2da      	uxtb	r2, r3
 8000422:	4b19      	ldr	r3, [pc, #100]	; (8000488 <fsm_for_auto_2+0xc0>)
 8000424:	701a      	strb	r2, [r3, #0]
		break;
 8000426:	e028      	b.n	800047a <fsm_for_auto_2+0xb2>
	case AMBER:
		if(time_2 == 0){
 8000428:	4b17      	ldr	r3, [pc, #92]	; (8000488 <fsm_for_auto_2+0xc0>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d108      	bne.n	8000442 <fsm_for_auto_2+0x7a>
			time_2 = TIME_RED;
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <fsm_for_auto_2+0xc4>)
 8000432:	781a      	ldrb	r2, [r3, #0]
 8000434:	4b14      	ldr	r3, [pc, #80]	; (8000488 <fsm_for_auto_2+0xc0>)
 8000436:	701a      	strb	r2, [r3, #0]
			Light_2_Red();
 8000438:	f000 fc58 	bl	8000cec <Light_2_Red>
			mode_auto_2 = RED;
 800043c:	4b10      	ldr	r3, [pc, #64]	; (8000480 <fsm_for_auto_2+0xb8>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
		}
		time_2--;
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <fsm_for_auto_2+0xc0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	3b01      	subs	r3, #1
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <fsm_for_auto_2+0xc0>)
 800044c:	701a      	strb	r2, [r3, #0]
		break;
 800044e:	e014      	b.n	800047a <fsm_for_auto_2+0xb2>
	case GREEN:
		if(time_2 == 0){
 8000450:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <fsm_for_auto_2+0xc0>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d108      	bne.n	800046a <fsm_for_auto_2+0xa2>
			time_2 = TIME_AMBER;
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <fsm_for_auto_2+0xc8>)
 800045a:	781a      	ldrb	r2, [r3, #0]
 800045c:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <fsm_for_auto_2+0xc0>)
 800045e:	701a      	strb	r2, [r3, #0]
			Light_2_Amber();
 8000460:	f000 fc54 	bl	8000d0c <Light_2_Amber>
			mode_auto_2 = AMBER;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <fsm_for_auto_2+0xb8>)
 8000466:	2202      	movs	r2, #2
 8000468:	701a      	strb	r2, [r3, #0]
		}
		time_2--;
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <fsm_for_auto_2+0xc0>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	3b01      	subs	r3, #1
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <fsm_for_auto_2+0xc0>)
 8000474:	701a      	strb	r2, [r3, #0]
		break;
 8000476:	e000      	b.n	800047a <fsm_for_auto_2+0xb2>
	default:
		break;
 8000478:	bf00      	nop
	}
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200000af 	.word	0x200000af
 8000484:	20000002 	.word	0x20000002
 8000488:	200000b2 	.word	0x200000b2
 800048c:	20000000 	.word	0x20000000
 8000490:	20000001 	.word	0x20000001

08000494 <fsm_for_input_processing>:

void fsm_for_input_processing(void){
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	switch(mode){
 8000498:	4b91      	ldr	r3, [pc, #580]	; (80006e0 <fsm_for_input_processing+0x24c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b06      	cmp	r3, #6
 800049e:	f200 8111 	bhi.w	80006c4 <fsm_for_input_processing+0x230>
 80004a2:	a201      	add	r2, pc, #4	; (adr r2, 80004a8 <fsm_for_input_processing+0x14>)
 80004a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a8:	080004c5 	.word	0x080004c5
 80004ac:	080004fd 	.word	0x080004fd
 80004b0:	0800054b 	.word	0x0800054b
 80004b4:	08000575 	.word	0x08000575
 80004b8:	080005d5 	.word	0x080005d5
 80004bc:	08000633 	.word	0x08000633
 80004c0:	08000691 	.word	0x08000691
	case INIT:
		mode_auto_1 = INIT_LIGHT;
 80004c4:	4b87      	ldr	r3, [pc, #540]	; (80006e4 <fsm_for_input_processing+0x250>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
		mode_auto_2 = INIT_LIGHT;
 80004ca:	4b87      	ldr	r3, [pc, #540]	; (80006e8 <fsm_for_input_processing+0x254>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
		index_task_temp_1 = SCH_Add_Task(fsm_for_auto_1, 0, 100);		//1000ms
 80004d0:	2264      	movs	r2, #100	; 0x64
 80004d2:	2100      	movs	r1, #0
 80004d4:	4885      	ldr	r0, [pc, #532]	; (80006ec <fsm_for_input_processing+0x258>)
 80004d6:	f000 fc87 	bl	8000de8 <SCH_Add_Task>
 80004da:	4603      	mov	r3, r0
 80004dc:	461a      	mov	r2, r3
 80004de:	4b84      	ldr	r3, [pc, #528]	; (80006f0 <fsm_for_input_processing+0x25c>)
 80004e0:	701a      	strb	r2, [r3, #0]
		index_task_temp_2 = SCH_Add_Task(fsm_for_auto_2, 0, 100);		//1000ms
 80004e2:	2264      	movs	r2, #100	; 0x64
 80004e4:	2100      	movs	r1, #0
 80004e6:	4883      	ldr	r0, [pc, #524]	; (80006f4 <fsm_for_input_processing+0x260>)
 80004e8:	f000 fc7e 	bl	8000de8 <SCH_Add_Task>
 80004ec:	4603      	mov	r3, r0
 80004ee:	461a      	mov	r2, r3
 80004f0:	4b81      	ldr	r3, [pc, #516]	; (80006f8 <fsm_for_input_processing+0x264>)
 80004f2:	701a      	strb	r2, [r3, #0]
		mode = AUTO;
 80004f4:	4b7a      	ldr	r3, [pc, #488]	; (80006e0 <fsm_for_input_processing+0x24c>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
		break;
 80004fa:	e0ee      	b.n	80006da <fsm_for_input_processing+0x246>
	case AUTO:

		UART_BUFFER[0] = time_1;
 80004fc:	4b7f      	ldr	r3, [pc, #508]	; (80006fc <fsm_for_input_processing+0x268>)
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	4b7f      	ldr	r3, [pc, #508]	; (8000700 <fsm_for_input_processing+0x26c>)
 8000502:	701a      	strb	r2, [r3, #0]
		UART_BUFFER[1] = time_2;
 8000504:	4b7f      	ldr	r3, [pc, #508]	; (8000704 <fsm_for_input_processing+0x270>)
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	4b7d      	ldr	r3, [pc, #500]	; (8000700 <fsm_for_input_processing+0x26c>)
 800050a:	705a      	strb	r2, [r3, #1]

		if(is_button_pressed(PEDES_BUTTON) && (!is_P_Light_On)){
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f97d 	bl	800080c <is_button_pressed>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d007      	beq.n	8000528 <fsm_for_input_processing+0x94>
 8000518:	4b7b      	ldr	r3, [pc, #492]	; (8000708 <fsm_for_input_processing+0x274>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d103      	bne.n	8000528 <fsm_for_input_processing+0x94>
			mode = PEDESTRIAN;
 8000520:	4b6f      	ldr	r3, [pc, #444]	; (80006e0 <fsm_for_input_processing+0x24c>)
 8000522:	2206      	movs	r2, #6
 8000524:	701a      	strb	r2, [r3, #0]
		else if(is_button_pressed(BUTTON_3)){
			SCH_Delete_Task_NAME(fsm_for_auto_1);
			SCH_Delete_Task_NAME(fsm_for_auto_2);
			mode = MANUAL;
		}
		break;
 8000526:	e0cf      	b.n	80006c8 <fsm_for_input_processing+0x234>
		else if(is_button_pressed(BUTTON_3)){
 8000528:	2002      	movs	r0, #2
 800052a:	f000 f96f 	bl	800080c <is_button_pressed>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	f000 80c9 	beq.w	80006c8 <fsm_for_input_processing+0x234>
			SCH_Delete_Task_NAME(fsm_for_auto_1);
 8000536:	486d      	ldr	r0, [pc, #436]	; (80006ec <fsm_for_input_processing+0x258>)
 8000538:	f000 fd98 	bl	800106c <SCH_Delete_Task_NAME>
			SCH_Delete_Task_NAME(fsm_for_auto_2);
 800053c:	486d      	ldr	r0, [pc, #436]	; (80006f4 <fsm_for_input_processing+0x260>)
 800053e:	f000 fd95 	bl	800106c <SCH_Delete_Task_NAME>
			mode = MANUAL;
 8000542:	4b67      	ldr	r3, [pc, #412]	; (80006e0 <fsm_for_input_processing+0x24c>)
 8000544:	2202      	movs	r2, #2
 8000546:	701a      	strb	r2, [r3, #0]
		break;
 8000548:	e0be      	b.n	80006c8 <fsm_for_input_processing+0x234>
	case MANUAL:

		UART_BUFFER[0] = 0;
 800054a:	4b6d      	ldr	r3, [pc, #436]	; (8000700 <fsm_for_input_processing+0x26c>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
		UART_BUFFER[1] = 0;
 8000550:	4b6b      	ldr	r3, [pc, #428]	; (8000700 <fsm_for_input_processing+0x26c>)
 8000552:	2200      	movs	r2, #0
 8000554:	705a      	strb	r2, [r3, #1]
		fsm_for_manual_1();
 8000556:	f7ff fe51 	bl	80001fc <fsm_for_manual_1>
		fsm_for_manual_2();
 800055a:	f7ff fe8f 	bl	800027c <fsm_for_manual_2>

		if(is_button_pressed(BUTTON_3)){
 800055e:	2002      	movs	r0, #2
 8000560:	f000 f954 	bl	800080c <is_button_pressed>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	f000 80b0 	beq.w	80006cc <fsm_for_input_processing+0x238>
			mode = MODI_RED;
 800056c:	4b5c      	ldr	r3, [pc, #368]	; (80006e0 <fsm_for_input_processing+0x24c>)
 800056e:	2203      	movs	r2, #3
 8000570:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000572:	e0ab      	b.n	80006cc <fsm_for_input_processing+0x238>
	case MODI_RED:

		UART_BUFFER[0] = TIME_RED;
 8000574:	4b65      	ldr	r3, [pc, #404]	; (800070c <fsm_for_input_processing+0x278>)
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	4b61      	ldr	r3, [pc, #388]	; (8000700 <fsm_for_input_processing+0x26c>)
 800057a:	701a      	strb	r2, [r3, #0]
		UART_BUFFER[1] = 11;
 800057c:	4b60      	ldr	r3, [pc, #384]	; (8000700 <fsm_for_input_processing+0x26c>)
 800057e:	220b      	movs	r2, #11
 8000580:	705a      	strb	r2, [r3, #1]
		Light_1_Red();
 8000582:	f000 fb77 	bl	8000c74 <Light_1_Red>
		Light_2_Red();
 8000586:	f000 fbb1 	bl	8000cec <Light_2_Red>

		if(is_button_pressed(BUTTON_1)){
 800058a:	2000      	movs	r0, #0
 800058c:	f000 f93e 	bl	800080c <is_button_pressed>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d006      	beq.n	80005a4 <fsm_for_input_processing+0x110>
			TIME_RED++;
 8000596:	4b5d      	ldr	r3, [pc, #372]	; (800070c <fsm_for_input_processing+0x278>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b5b      	ldr	r3, [pc, #364]	; (800070c <fsm_for_input_processing+0x278>)
 80005a0:	701a      	strb	r2, [r3, #0]
			TIME_RED--;
		}
		else if(is_button_pressed(BUTTON_3)){
			mode = MODI_AMBER;
		}
		break;
 80005a2:	e095      	b.n	80006d0 <fsm_for_input_processing+0x23c>
		else if(is_button_pressed(BUTTON_2)){
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 f931 	bl	800080c <is_button_pressed>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d006      	beq.n	80005be <fsm_for_input_processing+0x12a>
			TIME_RED--;
 80005b0:	4b56      	ldr	r3, [pc, #344]	; (800070c <fsm_for_input_processing+0x278>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b54      	ldr	r3, [pc, #336]	; (800070c <fsm_for_input_processing+0x278>)
 80005ba:	701a      	strb	r2, [r3, #0]
		break;
 80005bc:	e088      	b.n	80006d0 <fsm_for_input_processing+0x23c>
		else if(is_button_pressed(BUTTON_3)){
 80005be:	2002      	movs	r0, #2
 80005c0:	f000 f924 	bl	800080c <is_button_pressed>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	f000 8082 	beq.w	80006d0 <fsm_for_input_processing+0x23c>
			mode = MODI_AMBER;
 80005cc:	4b44      	ldr	r3, [pc, #272]	; (80006e0 <fsm_for_input_processing+0x24c>)
 80005ce:	2204      	movs	r2, #4
 80005d0:	701a      	strb	r2, [r3, #0]
		break;
 80005d2:	e07d      	b.n	80006d0 <fsm_for_input_processing+0x23c>
	case MODI_AMBER:

		UART_BUFFER[0] = TIME_AMBER;
 80005d4:	4b4e      	ldr	r3, [pc, #312]	; (8000710 <fsm_for_input_processing+0x27c>)
 80005d6:	781a      	ldrb	r2, [r3, #0]
 80005d8:	4b49      	ldr	r3, [pc, #292]	; (8000700 <fsm_for_input_processing+0x26c>)
 80005da:	701a      	strb	r2, [r3, #0]
		UART_BUFFER[1] = 22;
 80005dc:	4b48      	ldr	r3, [pc, #288]	; (8000700 <fsm_for_input_processing+0x26c>)
 80005de:	2216      	movs	r2, #22
 80005e0:	705a      	strb	r2, [r3, #1]
		Light_1_Amber();
 80005e2:	f000 fb5b 	bl	8000c9c <Light_1_Amber>
		Light_2_Amber();
 80005e6:	f000 fb91 	bl	8000d0c <Light_2_Amber>

		if(is_button_pressed(BUTTON_1)){
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 f90e 	bl	800080c <is_button_pressed>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <fsm_for_input_processing+0x170>
			TIME_AMBER++;
 80005f6:	4b46      	ldr	r3, [pc, #280]	; (8000710 <fsm_for_input_processing+0x27c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b44      	ldr	r3, [pc, #272]	; (8000710 <fsm_for_input_processing+0x27c>)
 8000600:	701a      	strb	r2, [r3, #0]
			TIME_AMBER--;
		}
		else if(is_button_pressed(BUTTON_3)){
			mode = MODI_GREEN;
		}
		break;
 8000602:	e067      	b.n	80006d4 <fsm_for_input_processing+0x240>
		else if(is_button_pressed(BUTTON_2)){
 8000604:	2001      	movs	r0, #1
 8000606:	f000 f901 	bl	800080c <is_button_pressed>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d006      	beq.n	800061e <fsm_for_input_processing+0x18a>
			TIME_AMBER--;
 8000610:	4b3f      	ldr	r3, [pc, #252]	; (8000710 <fsm_for_input_processing+0x27c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	3b01      	subs	r3, #1
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <fsm_for_input_processing+0x27c>)
 800061a:	701a      	strb	r2, [r3, #0]
		break;
 800061c:	e05a      	b.n	80006d4 <fsm_for_input_processing+0x240>
		else if(is_button_pressed(BUTTON_3)){
 800061e:	2002      	movs	r0, #2
 8000620:	f000 f8f4 	bl	800080c <is_button_pressed>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d054      	beq.n	80006d4 <fsm_for_input_processing+0x240>
			mode = MODI_GREEN;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <fsm_for_input_processing+0x24c>)
 800062c:	2205      	movs	r2, #5
 800062e:	701a      	strb	r2, [r3, #0]
		break;
 8000630:	e050      	b.n	80006d4 <fsm_for_input_processing+0x240>
	case MODI_GREEN:

		UART_BUFFER[0] = TIME_GREEN;
 8000632:	4b38      	ldr	r3, [pc, #224]	; (8000714 <fsm_for_input_processing+0x280>)
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	4b32      	ldr	r3, [pc, #200]	; (8000700 <fsm_for_input_processing+0x26c>)
 8000638:	701a      	strb	r2, [r3, #0]
		UART_BUFFER[1] = 33;
 800063a:	4b31      	ldr	r3, [pc, #196]	; (8000700 <fsm_for_input_processing+0x26c>)
 800063c:	2221      	movs	r2, #33	; 0x21
 800063e:	705a      	strb	r2, [r3, #1]
		Light_1_Green();
 8000640:	f000 fb40 	bl	8000cc4 <Light_1_Green>
		Light_2_Green();
 8000644:	f000 fb72 	bl	8000d2c <Light_2_Green>

		if(is_button_pressed(BUTTON_1)){
 8000648:	2000      	movs	r0, #0
 800064a:	f000 f8df 	bl	800080c <is_button_pressed>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d006      	beq.n	8000662 <fsm_for_input_processing+0x1ce>
			TIME_GREEN++;
 8000654:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <fsm_for_input_processing+0x280>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <fsm_for_input_processing+0x280>)
 800065e:	701a      	strb	r2, [r3, #0]
			TIME_GREEN--;
		}
		else if(is_button_pressed(BUTTON_3)){
			mode = INIT;
		}
		break;
 8000660:	e03a      	b.n	80006d8 <fsm_for_input_processing+0x244>
		else if(is_button_pressed(BUTTON_2)){
 8000662:	2001      	movs	r0, #1
 8000664:	f000 f8d2 	bl	800080c <is_button_pressed>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <fsm_for_input_processing+0x1e8>
			TIME_GREEN--;
 800066e:	4b29      	ldr	r3, [pc, #164]	; (8000714 <fsm_for_input_processing+0x280>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	3b01      	subs	r3, #1
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <fsm_for_input_processing+0x280>)
 8000678:	701a      	strb	r2, [r3, #0]
		break;
 800067a:	e02d      	b.n	80006d8 <fsm_for_input_processing+0x244>
		else if(is_button_pressed(BUTTON_3)){
 800067c:	2002      	movs	r0, #2
 800067e:	f000 f8c5 	bl	800080c <is_button_pressed>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d027      	beq.n	80006d8 <fsm_for_input_processing+0x244>
			mode = INIT;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <fsm_for_input_processing+0x24c>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		break;
 800068e:	e023      	b.n	80006d8 <fsm_for_input_processing+0x244>
	case PEDESTRIAN:

		SCH_Add_Task(Pedestrian_Control, 0, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2100      	movs	r1, #0
 8000694:	4820      	ldr	r0, [pc, #128]	; (8000718 <fsm_for_input_processing+0x284>)
 8000696:	f000 fba7 	bl	8000de8 <SCH_Add_Task>

		//Off P light after 2 cycles of traffic light
		SCH_Add_Task(Delete_Pedestrian_Control, 2 * ( TIME_RED + TIME_GREEN + TIME_AMBER) * 100, 0);
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <fsm_for_input_processing+0x278>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <fsm_for_input_processing+0x280>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4413      	add	r3, r2
 80006a6:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <fsm_for_input_processing+0x27c>)
 80006a8:	7812      	ldrb	r2, [r2, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	22c8      	movs	r2, #200	; 0xc8
 80006ae:	fb02 f303 	mul.w	r3, r2, r3
 80006b2:	2200      	movs	r2, #0
 80006b4:	4619      	mov	r1, r3
 80006b6:	4819      	ldr	r0, [pc, #100]	; (800071c <fsm_for_input_processing+0x288>)
 80006b8:	f000 fb96 	bl	8000de8 <SCH_Add_Task>
		mode = AUTO;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <fsm_for_input_processing+0x24c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
		break;
 80006c2:	e00a      	b.n	80006da <fsm_for_input_processing+0x246>
	default:
		break;
 80006c4:	bf00      	nop
 80006c6:	e008      	b.n	80006da <fsm_for_input_processing+0x246>
		break;
 80006c8:	bf00      	nop
 80006ca:	e006      	b.n	80006da <fsm_for_input_processing+0x246>
		break;
 80006cc:	bf00      	nop
 80006ce:	e004      	b.n	80006da <fsm_for_input_processing+0x246>
		break;
 80006d0:	bf00      	nop
 80006d2:	e002      	b.n	80006da <fsm_for_input_processing+0x246>
		break;
 80006d4:	bf00      	nop
 80006d6:	e000      	b.n	80006da <fsm_for_input_processing+0x246>
		break;
 80006d8:	bf00      	nop
	}
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000b0 	.word	0x200000b0
 80006e4:	200000ae 	.word	0x200000ae
 80006e8:	200000af 	.word	0x200000af
 80006ec:	080002fd 	.word	0x080002fd
 80006f0:	200000b3 	.word	0x200000b3
 80006f4:	080003c9 	.word	0x080003c9
 80006f8:	200000b4 	.word	0x200000b4
 80006fc:	200000b1 	.word	0x200000b1
 8000700:	200000b8 	.word	0x200000b8
 8000704:	200000b2 	.word	0x200000b2
 8000708:	200000b5 	.word	0x200000b5
 800070c:	20000000 	.word	0x20000000
 8000710:	20000001 	.word	0x20000001
 8000714:	20000002 	.word	0x20000002
 8000718:	08000165 	.word	0x08000165
 800071c:	080001d9 	.word	0x080001d9

08000720 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void){
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 8000726:	2300      	movs	r3, #0
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	e057      	b.n	80007dc <button_reading+0xbc>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800072c:	79fa      	ldrb	r2, [r7, #7]
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	492e      	ldr	r1, [pc, #184]	; (80007ec <button_reading+0xcc>)
 8000732:	5c89      	ldrb	r1, [r1, r2]
 8000734:	4a2e      	ldr	r2, [pc, #184]	; (80007f0 <button_reading+0xd0>)
 8000736:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <button_reading+0xd4>)
 800073c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	492d      	ldr	r1, [pc, #180]	; (80007f8 <button_reading+0xd8>)
 8000744:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000748:	79fc      	ldrb	r4, [r7, #7]
 800074a:	4619      	mov	r1, r3
 800074c:	4610      	mov	r0, r2
 800074e:	f001 fa5b 	bl	8001c08 <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	461a      	mov	r2, r3
 8000756:	4b25      	ldr	r3, [pc, #148]	; (80007ec <button_reading+0xcc>)
 8000758:	551a      	strb	r2, [r3, r4]

		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4a23      	ldr	r2, [pc, #140]	; (80007ec <button_reading+0xcc>)
 800075e:	5cd2      	ldrb	r2, [r2, r3]
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4923      	ldr	r1, [pc, #140]	; (80007f0 <button_reading+0xd0>)
 8000764:	5ccb      	ldrb	r3, [r1, r3]
 8000766:	429a      	cmp	r2, r3
 8000768:	d135      	bne.n	80007d6 <button_reading+0xb6>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800076a:	79fa      	ldrb	r2, [r7, #7]
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	491f      	ldr	r1, [pc, #124]	; (80007ec <button_reading+0xcc>)
 8000770:	5c89      	ldrb	r1, [r1, r2]
 8000772:	4a22      	ldr	r2, [pc, #136]	; (80007fc <button_reading+0xdc>)
 8000774:	54d1      	strb	r1, [r2, r3]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4a20      	ldr	r2, [pc, #128]	; (80007fc <button_reading+0xdc>)
 800077a:	5cd3      	ldrb	r3, [r2, r3]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d114      	bne.n	80007aa <button_reading+0x8a>
			//if a button is pressed, we start counting
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4a1f      	ldr	r2, [pc, #124]	; (8000800 <button_reading+0xe0>)
 8000784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000788:	2b63      	cmp	r3, #99	; 0x63
 800078a:	d809      	bhi.n	80007a0 <button_reading+0x80>
					counterForButtonPress1s[i]++;
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <button_reading+0xe0>)
 8000790:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000794:	3201      	adds	r2, #1
 8000796:	b291      	uxth	r1, r2
 8000798:	4a19      	ldr	r2, [pc, #100]	; (8000800 <button_reading+0xe0>)
 800079a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800079e:	e01a      	b.n	80007d6 <button_reading+0xb6>
				} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <button_reading+0xe4>)
 80007a4:	2101      	movs	r1, #1
 80007a6:	54d1      	strb	r1, [r2, r3]
 80007a8:	e015      	b.n	80007d6 <button_reading+0xb6>
					//todo
				}
			} else {
				flagForButtonPress[i] = counterForButtonPress1s[i] > 0 ? 1 : 0;
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	4a14      	ldr	r2, [pc, #80]	; (8000800 <button_reading+0xe0>)
 80007ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	bf14      	ite	ne
 80007b6:	2301      	movne	r3, #1
 80007b8:	2300      	moveq	r3, #0
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4611      	mov	r1, r2
 80007c0:	4a11      	ldr	r2, [pc, #68]	; (8000808 <button_reading+0xe8>)
 80007c2:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[i] = 0;
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <button_reading+0xe0>)
 80007c8:	2100      	movs	r1, #0
 80007ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <button_reading+0xe4>)
 80007d2:	2100      	movs	r1, #0
 80007d4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	3301      	adds	r3, #1
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d9a4      	bls.n	800072c <button_reading+0xc>
			}
		}
	}
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	200000bc 	.word	0x200000bc
 80007f0:	200000c0 	.word	0x200000c0
 80007f4:	2000000c 	.word	0x2000000c
 80007f8:	20000004 	.word	0x20000004
 80007fc:	2000001c 	.word	0x2000001c
 8000800:	200000cc 	.word	0x200000cc
 8000804:	200000c8 	.word	0x200000c8
 8000808:	200000c4 	.word	0x200000c4

0800080c <is_button_pressed>:
		return (counterForButtonPress1s[index]);
	}
	return 0;
}

unsigned char is_button_pressed(unsigned char index){
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b03      	cmp	r3, #3
 800081a:	d901      	bls.n	8000820 <is_button_pressed+0x14>
 800081c:	2300      	movs	r3, #0
 800081e:	e002      	b.n	8000826 <is_button_pressed+0x1a>


	return (flagForButtonPress[index]);
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4a03      	ldr	r2, [pc, #12]	; (8000830 <is_button_pressed+0x24>)
 8000824:	5cd3      	ldrb	r3, [r2, r3]
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	200000c4 	.word	0x200000c4

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 fe42 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f83c 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 f968 	bl	8000b14 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000844:	f000 f87a 	bl	800093c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000848:	f000 f8c4 	bl	80009d4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800084c:	f000 f938 	bl	8000ac0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);						//timer2		clock 10ms
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <main+0x68>)
 8000852:	f001 fe73 	bl	800253c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); 			//pwm 			clock 1ms
 8000856:	2100      	movs	r1, #0
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <main+0x6c>)
 800085a:	f001 ff19 	bl	8002690 <HAL_TIM_PWM_Start>
  SCH_Init();
 800085e:	f000 fab1 	bl	8000dc4 <SCH_Init>
  SCH_Add_Task(RunSoftwareTimer, 10, 1);				//10ms
 8000862:	2201      	movs	r2, #1
 8000864:	210a      	movs	r1, #10
 8000866:	480f      	ldr	r0, [pc, #60]	; (80008a4 <main+0x70>)
 8000868:	f000 fabe 	bl	8000de8 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 10, 1);					//10ms
 800086c:	2201      	movs	r2, #1
 800086e:	210a      	movs	r1, #10
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <main+0x74>)
 8000872:	f000 fab9 	bl	8000de8 <SCH_Add_Task>
  SCH_Add_Task(fsm_for_input_processing, 10, 1);		//10ms
 8000876:	2201      	movs	r2, #1
 8000878:	210a      	movs	r1, #10
 800087a:	480c      	ldr	r0, [pc, #48]	; (80008ac <main+0x78>)
 800087c:	f000 fab4 	bl	8000de8 <SCH_Add_Task>
  SCH_Add_Task(UART_Buffer_Transmit, 0, 50);			//500ms
 8000880:	2232      	movs	r2, #50	; 0x32
 8000882:	2100      	movs	r1, #0
 8000884:	480a      	ldr	r0, [pc, #40]	; (80008b0 <main+0x7c>)
 8000886:	f000 faaf 	bl	8000de8 <SCH_Add_Task>
  SCH_Add_Task(Buzzer_PWM_Control, 0, 1);				//10ms
 800088a:	2201      	movs	r2, #1
 800088c:	2100      	movs	r1, #0
 800088e:	4809      	ldr	r0, [pc, #36]	; (80008b4 <main+0x80>)
 8000890:	f000 faaa 	bl	8000de8 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000894:	f000 fb58 	bl	8000f48 <SCH_Dispatch_Tasks>
 8000898:	e7fc      	b.n	8000894 <main+0x60>
 800089a:	bf00      	nop
 800089c:	200000d4 	.word	0x200000d4
 80008a0:	2000011c 	.word	0x2000011c
 80008a4:	080010b1 	.word	0x080010b1
 80008a8:	08000721 	.word	0x08000721
 80008ac:	08000495 	.word	0x08000495
 80008b0:	08000bf1 	.word	0x08000bf1
 80008b4:	08000c49 	.word	0x08000c49

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b090      	sub	sp, #64	; 0x40
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0318 	add.w	r3, r7, #24
 80008c2:	2228      	movs	r2, #40	; 0x28
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 fa48 	bl	8003d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008de:	2301      	movs	r3, #1
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e2:	2310      	movs	r3, #16
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e6:	2302      	movs	r3, #2
 80008e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008ea:	2300      	movs	r3, #0
 80008ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80008ee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 0318 	add.w	r3, r7, #24
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 f9b5 	bl	8001c68 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000904:	f000 f9b0 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	230f      	movs	r3, #15
 800090a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090c:	2302      	movs	r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000918:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2102      	movs	r1, #2
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fc22 	bl	800216c <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800092e:	f000 f99b 	bl	8000c68 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3740      	adds	r7, #64	; 0x40
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	463b      	mov	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_TIM2_Init+0x94>)
 800095a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800095e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_TIM2_Init+0x94>)
 8000962:	f242 720f 	movw	r2, #9999	; 0x270f
 8000966:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_TIM2_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_TIM2_Init+0x94>)
 8000970:	223f      	movs	r2, #63	; 0x3f
 8000972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_TIM2_Init+0x94>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_TIM2_Init+0x94>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <MX_TIM2_Init+0x94>)
 8000982:	f001 fd8b 	bl	800249c <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800098c:	f000 f96c 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000994:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_TIM2_Init+0x94>)
 800099e:	f002 f8df 	bl	8002b60 <HAL_TIM_ConfigClockSource>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009a8:	f000 f95e 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_TIM2_Init+0x94>)
 80009ba:	f002 fc5d 	bl	8003278 <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009c4:	f000 f950 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000d4 	.word	0x200000d4

080009d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	; 0x38
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
 8000a00:	615a      	str	r2, [r3, #20]
 8000a02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a04:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <MX_TIM3_Init+0xe4>)
 8000a06:	4a2d      	ldr	r2, [pc, #180]	; (8000abc <MX_TIM3_Init+0xe8>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <MX_TIM3_Init+0xe4>)
 8000a0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <MX_TIM3_Init+0xe4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63;
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_TIM3_Init+0xe4>)
 8000a1a:	223f      	movs	r2, #63	; 0x3f
 8000a1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <MX_TIM3_Init+0xe4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <MX_TIM3_Init+0xe4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a2a:	4823      	ldr	r0, [pc, #140]	; (8000ab8 <MX_TIM3_Init+0xe4>)
 8000a2c:	f001 fd36 	bl	800249c <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a36:	f000 f917 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a44:	4619      	mov	r1, r3
 8000a46:	481c      	ldr	r0, [pc, #112]	; (8000ab8 <MX_TIM3_Init+0xe4>)
 8000a48:	f002 f88a 	bl	8002b60 <HAL_TIM_ConfigClockSource>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a52:	f000 f909 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <MX_TIM3_Init+0xe4>)
 8000a58:	f001 fdc2 	bl	80025e0 <HAL_TIM_PWM_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a62:	f000 f901 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	4619      	mov	r1, r3
 8000a74:	4810      	ldr	r0, [pc, #64]	; (8000ab8 <MX_TIM3_Init+0xe4>)
 8000a76:	f002 fbff 	bl	8003278 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a80:	f000 f8f2 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a84:	2360      	movs	r3, #96	; 0x60
 8000a86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <MX_TIM3_Init+0xe4>)
 8000a9c:	f001 ffa2 	bl	80029e4 <HAL_TIM_PWM_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000aa6:	f000 f8df 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aaa:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <MX_TIM3_Init+0xe4>)
 8000aac:	f000 fbdc 	bl	8001268 <HAL_TIM_MspPostInit>

}
 8000ab0:	bf00      	nop
 8000ab2:	3738      	adds	r7, #56	; 0x38
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000011c 	.word	0x2000011c
 8000abc:	40000400 	.word	0x40000400

08000ac0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_USART2_UART_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af8:	f002 fc2e 	bl	8003358 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b02:	f000 f8b1 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000164 	.word	0x20000164
 8000b10:	40004400 	.word	0x40004400

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a2d      	ldr	r2, [pc, #180]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b40:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a27      	ldr	r2, [pc, #156]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b46:	f043 0308 	orr.w	r3, r3, #8
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0308 	and.w	r3, r3, #8
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P_Light_a_Pin|T_Light_1_b_Pin|T_Light_2_b_Pin|T_Light_2_a_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000b5e:	4822      	ldr	r0, [pc, #136]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b60:	f001 f869 	bl	8001c36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P_Light_b_Pin|T_Light_1_a_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000b6a:	4820      	ldr	r0, [pc, #128]	; (8000bec <MX_GPIO_Init+0xd8>)
 8000b6c:	f001 f863 	bl	8001c36 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Pedestrian_Button_Pin Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Pedestrian_Button_Pin|Button_1_Pin|Button_2_Pin;
 8000b70:	2313      	movs	r3, #19
 8000b72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	4619      	mov	r1, r3
 8000b82:	481a      	ldr	r0, [pc, #104]	; (8000bec <MX_GPIO_Init+0xd8>)
 8000b84:	f000 febc 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4813      	ldr	r0, [pc, #76]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000b9c:	f000 feb0 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_Light_a_Pin T_Light_1_b_Pin T_Light_2_b_Pin T_Light_2_a_Pin */
  GPIO_InitStruct.Pin = P_Light_a_Pin|T_Light_1_b_Pin|T_Light_2_b_Pin|T_Light_2_a_Pin;
 8000ba0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000ba4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480b      	ldr	r0, [pc, #44]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000bba:	f000 fea1 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_Light_b_Pin T_Light_1_a_Pin */
  GPIO_InitStruct.Pin = P_Light_b_Pin|T_Light_1_a_Pin;
 8000bbe:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000bc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_GPIO_Init+0xd8>)
 8000bd8:	f000 fe92 	bl	8001900 <HAL_GPIO_Init>

}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010c00 	.word	0x40010c00
 8000bec:	40010800 	.word	0x40010800

08000bf0 <UART_Buffer_Transmit>:

/* USER CODE BEGIN 4 */
uint8_t str[50];

void UART_Buffer_Transmit(void){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, str, sprintf(str, "!time1: %d#", UART_BUFFER[0]), 1000);
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <UART_Buffer_Transmit+0x44>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	490f      	ldr	r1, [pc, #60]	; (8000c38 <UART_Buffer_Transmit+0x48>)
 8000bfc:	480f      	ldr	r0, [pc, #60]	; (8000c3c <UART_Buffer_Transmit+0x4c>)
 8000bfe:	f003 f8b5 	bl	8003d6c <siprintf>
 8000c02:	4603      	mov	r3, r0
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0a:	490c      	ldr	r1, [pc, #48]	; (8000c3c <UART_Buffer_Transmit+0x4c>)
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <UART_Buffer_Transmit+0x50>)
 8000c0e:	f002 fbf0 	bl	80033f2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str, sprintf(str, "!time2: %d#\n\r", UART_BUFFER[1]), 1000);
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <UART_Buffer_Transmit+0x44>)
 8000c14:	785b      	ldrb	r3, [r3, #1]
 8000c16:	461a      	mov	r2, r3
 8000c18:	490a      	ldr	r1, [pc, #40]	; (8000c44 <UART_Buffer_Transmit+0x54>)
 8000c1a:	4808      	ldr	r0, [pc, #32]	; (8000c3c <UART_Buffer_Transmit+0x4c>)
 8000c1c:	f003 f8a6 	bl	8003d6c <siprintf>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c28:	4904      	ldr	r1, [pc, #16]	; (8000c3c <UART_Buffer_Transmit+0x4c>)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <UART_Buffer_Transmit+0x50>)
 8000c2c:	f002 fbe1 	bl	80033f2 <HAL_UART_Transmit>

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200000b8 	.word	0x200000b8
 8000c38:	08004678 	.word	0x08004678
 8000c3c:	200001a8 	.word	0x200001a8
 8000c40:	20000164 	.word	0x20000164
 8000c44:	08004684 	.word	0x08004684

08000c48 <Buzzer_PWM_Control>:

void Buzzer_PWM_Control(void){
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, BUZZER_VOLUME);
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <Buzzer_PWM_Control+0x18>)
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <Buzzer_PWM_Control+0x1c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	200000b6 	.word	0x200000b6
 8000c64:	2000011c 	.word	0x2000011c

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <Light_1_Red>:
 */

#include "output_control.h"


void Light_1_Red(void){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_Light_1_a_GPIO_Port, T_Light_1_a_Pin, SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <Light_1_Red+0x20>)
 8000c80:	f000 ffd9 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_Light_1_b_GPIO_Port, T_Light_1_b_Pin, RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2108      	movs	r1, #8
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <Light_1_Red+0x24>)
 8000c8a:	f000 ffd4 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40010800 	.word	0x40010800
 8000c98:	40010c00 	.word	0x40010c00

08000c9c <Light_1_Amber>:
void Light_1_Amber(void){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_Light_1_a_GPIO_Port, T_Light_1_a_Pin, SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <Light_1_Amber+0x20>)
 8000ca8:	f000 ffc5 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_Light_1_b_GPIO_Port, T_Light_1_b_Pin, SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2108      	movs	r1, #8
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <Light_1_Amber+0x24>)
 8000cb2:	f000 ffc0 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	40010c00 	.word	0x40010c00

08000cc4 <Light_1_Green>:
void Light_1_Green(void){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_Light_1_a_GPIO_Port, T_Light_1_a_Pin, RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <Light_1_Green+0x20>)
 8000cd0:	f000 ffb1 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_Light_1_b_GPIO_Port, T_Light_1_b_Pin, SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <Light_1_Green+0x24>)
 8000cda:	f000 ffac 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	40010c00 	.word	0x40010c00

08000cec <Light_2_Red>:

void Light_2_Red(void){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_Light_2_a_GPIO_Port, T_Light_2_a_Pin, SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <Light_2_Red+0x1c>)
 8000cf6:	f000 ff9e 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_Light_2_b_GPIO_Port, T_Light_2_b_Pin, RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	4802      	ldr	r0, [pc, #8]	; (8000d08 <Light_2_Red+0x1c>)
 8000d00:	f000 ff99 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40010c00 	.word	0x40010c00

08000d0c <Light_2_Amber>:
void Light_2_Amber(void){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_Light_2_a_GPIO_Port, T_Light_2_a_Pin, SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2120      	movs	r1, #32
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <Light_2_Amber+0x1c>)
 8000d16:	f000 ff8e 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_Light_2_b_GPIO_Port, T_Light_2_b_Pin, SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2110      	movs	r1, #16
 8000d1e:	4802      	ldr	r0, [pc, #8]	; (8000d28 <Light_2_Amber+0x1c>)
 8000d20:	f000 ff89 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40010c00 	.word	0x40010c00

08000d2c <Light_2_Green>:
void Light_2_Green(void){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(T_Light_2_a_GPIO_Port, T_Light_2_a_Pin, RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2120      	movs	r1, #32
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <Light_2_Green+0x1c>)
 8000d36:	f000 ff7e 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_Light_2_b_GPIO_Port, T_Light_2_b_Pin, SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	4802      	ldr	r0, [pc, #8]	; (8000d48 <Light_2_Green+0x1c>)
 8000d40:	f000 ff79 	bl	8001c36 <HAL_GPIO_WritePin>

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40010c00 	.word	0x40010c00

08000d4c <Light_P_Off>:

void Light_P_Off(void){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_Light_a_GPIO_Port, P_Light_a_Pin, RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <Light_P_Off+0x20>)
 8000d58:	f000 ff6d 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_Light_b_GPIO_Port, P_Light_b_Pin, RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <Light_P_Off+0x24>)
 8000d64:	f000 ff67 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40010c00 	.word	0x40010c00
 8000d70:	40010800 	.word	0x40010800

08000d74 <Light_P_Red>:
void Light_P_Red(void){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_Light_a_GPIO_Port, P_Light_a_Pin, SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <Light_P_Red+0x20>)
 8000d80:	f000 ff59 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_Light_b_GPIO_Port, P_Light_b_Pin, RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8a:	4803      	ldr	r0, [pc, #12]	; (8000d98 <Light_P_Red+0x24>)
 8000d8c:	f000 ff53 	bl	8001c36 <HAL_GPIO_WritePin>

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40010c00 	.word	0x40010c00
 8000d98:	40010800 	.word	0x40010800

08000d9c <Light_P_Green>:
void Light_P_Amber(void){
	HAL_GPIO_WritePin(P_Light_a_GPIO_Port, P_Light_a_Pin, SET);
	HAL_GPIO_WritePin(P_Light_b_GPIO_Port, P_Light_b_Pin, SET);

}
void Light_P_Green(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_Light_a_GPIO_Port, P_Light_a_Pin, RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <Light_P_Green+0x20>)
 8000da8:	f000 ff45 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_Light_b_GPIO_Port, P_Light_b_Pin, SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db2:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <Light_P_Green+0x24>)
 8000db4:	f000 ff3f 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40010c00 	.word	0x40010c00
 8000dc0:	40010800 	.word	0x40010800

08000dc4 <SCH_Init>:

#include "scheduler.h"

static sTasks SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void){
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8000dca:	2300      	movs	r3, #0
 8000dcc:	71fb      	strb	r3, [r7, #7]
 8000dce:	e002      	b.n	8000dd6 <SCH_Init+0x12>
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b27      	cmp	r3, #39	; 0x27
 8000dda:	d9f9      	bls.n	8000dd0 <SCH_Init+0xc>

	}
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <SCH_Add_Task>:

uint8_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
	uint8_t index = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	75fb      	strb	r3, [r7, #23]
	while( (SCH_tasks_G[index].pTask != 0) && (index < SCH_MAX_TASKS) ){
 8000df8:	e002      	b.n	8000e00 <SCH_Add_Task+0x18>
		index++;
 8000dfa:	7dfb      	ldrb	r3, [r7, #23]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	75fb      	strb	r3, [r7, #23]
	while( (SCH_tasks_G[index].pTask != 0) && (index < SCH_MAX_TASKS) ){
 8000e00:	7dfa      	ldrb	r2, [r7, #23]
 8000e02:	491f      	ldr	r1, [pc, #124]	; (8000e80 <SCH_Add_Task+0x98>)
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <SCH_Add_Task+0x32>
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	2b27      	cmp	r3, #39	; 0x27
 8000e18:	d9ef      	bls.n	8000dfa <SCH_Add_Task+0x12>
	}

//	if index == MAX_TASKS => list is full
	if(index == SCH_MAX_TASKS){
 8000e1a:	7dfb      	ldrb	r3, [r7, #23]
 8000e1c:	2b28      	cmp	r3, #40	; 0x28
 8000e1e:	d101      	bne.n	8000e24 <SCH_Add_Task+0x3c>
		return SCH_MAX_TASKS;
 8000e20:	2328      	movs	r3, #40	; 0x28
 8000e22:	e027      	b.n	8000e74 <SCH_Add_Task+0x8c>
	}

//	there is a space in the task array
	SCH_tasks_G[index].pTask 	= pFunction;
 8000e24:	7dfa      	ldrb	r2, [r7, #23]
 8000e26:	4916      	ldr	r1, [pc, #88]	; (8000e80 <SCH_Add_Task+0x98>)
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Delay 	= DELAY;
 8000e36:	7dfa      	ldrb	r2, [r7, #23]
 8000e38:	4911      	ldr	r1, [pc, #68]	; (8000e80 <SCH_Add_Task+0x98>)
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	3304      	adds	r3, #4
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Period 	= PERIOD;
 8000e4a:	7dfa      	ldrb	r2, [r7, #23]
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <SCH_Add_Task+0x98>)
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	440b      	add	r3, r1
 8000e58:	3308      	adds	r3, #8
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].RunMe 	= 0;
 8000e5e:	7dfa      	ldrb	r2, [r7, #23]
 8000e60:	4907      	ldr	r1, [pc, #28]	; (8000e80 <SCH_Add_Task+0x98>)
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	330c      	adds	r3, #12
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
	return index;
 8000e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	371c      	adds	r7, #28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200001dc 	.word	0x200001dc

08000e84 <SCH_Update>:

void SCH_Update(void){
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
	uint8_t index;
//	NOTE: calculations are in STICKS (NOT milliseconds)
	for(index = 0; index < SCH_MAX_TASKS; index++){
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	e050      	b.n	8000f32 <SCH_Update+0xae>
//		check if there is a task at this location
		if(SCH_tasks_G[index].pTask){
 8000e90:	79fa      	ldrb	r2, [r7, #7]
 8000e92:	492c      	ldr	r1, [pc, #176]	; (8000f44 <SCH_Update+0xc0>)
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d043      	beq.n	8000f2c <SCH_Update+0xa8>
			if(SCH_tasks_G[index].Delay == 0){
 8000ea4:	79fa      	ldrb	r2, [r7, #7]
 8000ea6:	4927      	ldr	r1, [pc, #156]	; (8000f44 <SCH_Update+0xc0>)
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d126      	bne.n	8000f08 <SCH_Update+0x84>
//				increase RunMe flag
				SCH_tasks_G[index].RunMe++;
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	4921      	ldr	r1, [pc, #132]	; (8000f44 <SCH_Update+0xc0>)
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	330c      	adds	r3, #12
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	b2d8      	uxtb	r0, r3
 8000ed0:	491c      	ldr	r1, [pc, #112]	; (8000f44 <SCH_Update+0xc0>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	330c      	adds	r3, #12
 8000ede:	4602      	mov	r2, r0
 8000ee0:	701a      	strb	r2, [r3, #0]

//				if(SCH_tasks_G[index]. Period){
					SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period;
 8000ee2:	79f9      	ldrb	r1, [r7, #7]
 8000ee4:	79fa      	ldrb	r2, [r7, #7]
 8000ee6:	4817      	ldr	r0, [pc, #92]	; (8000f44 <SCH_Update+0xc0>)
 8000ee8:	460b      	mov	r3, r1
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4403      	add	r3, r0
 8000ef2:	3308      	adds	r3, #8
 8000ef4:	6819      	ldr	r1, [r3, #0]
 8000ef6:	4813      	ldr	r0, [pc, #76]	; (8000f44 <SCH_Update+0xc0>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4403      	add	r3, r0
 8000f02:	3304      	adds	r3, #4
 8000f04:	6019      	str	r1, [r3, #0]
 8000f06:	e011      	b.n	8000f2c <SCH_Update+0xa8>
//				}
			}
			else{
//				delay > 0
				SCH_tasks_G[index].Delay--;
 8000f08:	79fa      	ldrb	r2, [r7, #7]
 8000f0a:	490e      	ldr	r1, [pc, #56]	; (8000f44 <SCH_Update+0xc0>)
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	3304      	adds	r3, #4
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	1e59      	subs	r1, r3, #1
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <SCH_Update+0xc0>)
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4403      	add	r3, r0
 8000f28:	3304      	adds	r3, #4
 8000f2a:	6019      	str	r1, [r3, #0]
	for(index = 0; index < SCH_MAX_TASKS; index++){
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b27      	cmp	r3, #39	; 0x27
 8000f36:	d9ab      	bls.n	8000e90 <SCH_Update+0xc>
			}
		}
	}
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	200001dc 	.word	0x200001dc

08000f48 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
	uint8_t index;
	for(index = 0; index < SCH_MAX_TASKS; index++){
 8000f4e:	2300      	movs	r3, #0
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	e039      	b.n	8000fc8 <SCH_Dispatch_Tasks+0x80>
		if(SCH_tasks_G[index].RunMe > 0){
 8000f54:	79fa      	ldrb	r2, [r7, #7]
 8000f56:	4920      	ldr	r1, [pc, #128]	; (8000fd8 <SCH_Dispatch_Tasks+0x90>)
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	330c      	adds	r3, #12
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d02b      	beq.n	8000fc2 <SCH_Dispatch_Tasks+0x7a>
//			run the task
			(*SCH_tasks_G[index].pTask)();
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	491a      	ldr	r1, [pc, #104]	; (8000fd8 <SCH_Dispatch_Tasks+0x90>)
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	440b      	add	r3, r1
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4798      	blx	r3
			SCH_tasks_G[index].RunMe--;
 8000f7c:	79fa      	ldrb	r2, [r7, #7]
 8000f7e:	4916      	ldr	r1, [pc, #88]	; (8000fd8 <SCH_Dispatch_Tasks+0x90>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	330c      	adds	r3, #12
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	b2d8      	uxtb	r0, r3
 8000f92:	4911      	ldr	r1, [pc, #68]	; (8000fd8 <SCH_Dispatch_Tasks+0x90>)
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	330c      	adds	r3, #12
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	701a      	strb	r2, [r3, #0]

			//if period == 0 => one shot task => delete after run
			if(SCH_tasks_G[index].Period == 0){
 8000fa4:	79fa      	ldrb	r2, [r7, #7]
 8000fa6:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <SCH_Dispatch_Tasks+0x90>)
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d103      	bne.n	8000fc2 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(index);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f80d 	bl	8000fdc <SCH_Delete_Task>
	for(index = 0; index < SCH_MAX_TASKS; index++){
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b27      	cmp	r3, #39	; 0x27
 8000fcc:	d9c2      	bls.n	8000f54 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200001dc 	.word	0x200001dc

08000fdc <SCH_Delete_Task>:


void SCH_Delete_Task(const uint8_t index){
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	if(SCH_tasks_G[index].pTask == 0){
 8000fe6:	79fa      	ldrb	r2, [r7, #7]
 8000fe8:	491f      	ldr	r1, [pc, #124]	; (8001068 <SCH_Delete_Task+0x8c>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d031      	beq.n	800105e <SCH_Delete_Task+0x82>
//		no task at this location
		return;
	}
	SCH_tasks_G[index].pTask 	= 0x0000;
 8000ffa:	79fa      	ldrb	r2, [r7, #7]
 8000ffc:	491a      	ldr	r1, [pc, #104]	; (8001068 <SCH_Delete_Task+0x8c>)
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Delay 	= 0;
 800100c:	79fa      	ldrb	r2, [r7, #7]
 800100e:	4916      	ldr	r1, [pc, #88]	; (8001068 <SCH_Delete_Task+0x8c>)
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	3304      	adds	r3, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Period 	= 0;
 8001020:	79fa      	ldrb	r2, [r7, #7]
 8001022:	4911      	ldr	r1, [pc, #68]	; (8001068 <SCH_Delete_Task+0x8c>)
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	3308      	adds	r3, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].RunMe 	= 0;
 8001034:	79fa      	ldrb	r2, [r7, #7]
 8001036:	490c      	ldr	r1, [pc, #48]	; (8001068 <SCH_Delete_Task+0x8c>)
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	330c      	adds	r3, #12
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[index].TaskID 	= 0x0000;
 8001048:	79fa      	ldrb	r2, [r7, #7]
 800104a:	4907      	ldr	r1, [pc, #28]	; (8001068 <SCH_Delete_Task+0x8c>)
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	3310      	adds	r3, #16
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	e000      	b.n	8001060 <SCH_Delete_Task+0x84>
		return;
 800105e:	bf00      	nop
}
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	200001dc 	.word	0x200001dc

0800106c <SCH_Delete_Task_NAME>:

void SCH_Delete_Task_NAME(	void (*pTask) (void) ){
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < SCH_MAX_TASKS; i++){
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e012      	b.n	80010a0 <SCH_Delete_Task_NAME+0x34>
		if(SCH_tasks_G[i].pTask == pTask){
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	490b      	ldr	r1, [pc, #44]	; (80010ac <SCH_Delete_Task_NAME+0x40>)
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	d104      	bne.n	800109a <SCH_Delete_Task_NAME+0x2e>
			SCH_Delete_Task(i);
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ffa2 	bl	8000fdc <SCH_Delete_Task>
			return;
 8001098:	e005      	b.n	80010a6 <SCH_Delete_Task_NAME+0x3a>
	for(uint8_t i = 0; i < SCH_MAX_TASKS; i++){
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	3301      	adds	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b27      	cmp	r3, #39	; 0x27
 80010a4:	d9e9      	bls.n	800107a <SCH_Delete_Task_NAME+0xe>
		}
	}
}
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200001dc 	.word	0x200001dc

080010b0 <RunSoftwareTimer>:
void SetTimer_3(uint16_t duration){
	counter_timer_3 = duration / TIME_CYCLE;
	flag_timer_3 = 0;
}

void RunSoftwareTimer(void){
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	if(counter_timer_0 > 0){
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <RunSoftwareTimer+0x94>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00c      	beq.n	80010d6 <RunSoftwareTimer+0x26>
		counter_timer_0--;
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <RunSoftwareTimer+0x94>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <RunSoftwareTimer+0x94>)
 80010c6:	701a      	strb	r2, [r3, #0]
		if(counter_timer_0 == 0){
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <RunSoftwareTimer+0x94>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <RunSoftwareTimer+0x26>
			flag_timer_0 = 1;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <RunSoftwareTimer+0x98>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
		}
	}
	if(counter_timer_1 > 0){
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <RunSoftwareTimer+0x9c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00c      	beq.n	80010f8 <RunSoftwareTimer+0x48>
		counter_timer_1--;
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <RunSoftwareTimer+0x9c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <RunSoftwareTimer+0x9c>)
 80010e8:	701a      	strb	r2, [r3, #0]
		if(counter_timer_1 == 0){
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <RunSoftwareTimer+0x9c>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d102      	bne.n	80010f8 <RunSoftwareTimer+0x48>
			flag_timer_1 = 1;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <RunSoftwareTimer+0xa0>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
		}
	}
	if(counter_timer_2 > 0){
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <RunSoftwareTimer+0xa4>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00c      	beq.n	800111a <RunSoftwareTimer+0x6a>
		counter_timer_2--;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <RunSoftwareTimer+0xa4>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	3b01      	subs	r3, #1
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <RunSoftwareTimer+0xa4>)
 800110a:	701a      	strb	r2, [r3, #0]
		if(counter_timer_2 == 0){
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <RunSoftwareTimer+0xa4>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <RunSoftwareTimer+0x6a>
			flag_timer_2 = 1;
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <RunSoftwareTimer+0xa8>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
		}
	}
	if(counter_timer_3 > 0){
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <RunSoftwareTimer+0xac>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00c      	beq.n	800113c <RunSoftwareTimer+0x8c>
		counter_timer_3--;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <RunSoftwareTimer+0xac>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	3b01      	subs	r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <RunSoftwareTimer+0xac>)
 800112c:	701a      	strb	r2, [r3, #0]
		if(counter_timer_3 == 0){
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <RunSoftwareTimer+0xac>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <RunSoftwareTimer+0x8c>
			flag_timer_3 = 1;
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <RunSoftwareTimer+0xb0>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	200004fd 	.word	0x200004fd
 8001148:	200004fc 	.word	0x200004fc
 800114c:	200004ff 	.word	0x200004ff
 8001150:	200004fe 	.word	0x200004fe
 8001154:	20000501 	.word	0x20000501
 8001158:	20000500 	.word	0x20000500
 800115c:	20000503 	.word	0x20000503
 8001160:	20000502 	.word	0x20000502

08001164 <HAL_TIM_PeriodElapsedCallback>:

uint8_t FlagTimer_3(void){
	return flag_timer_3;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001174:	d101      	bne.n	800117a <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 8001176:	f7ff fe85 	bl	8000e84 <SCH_Update>
	}
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_MspInit+0x5c>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <HAL_MspInit+0x5c>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6193      	str	r3, [r2, #24]
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_MspInit+0x5c>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_MspInit+0x5c>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_MspInit+0x5c>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	61d3      	str	r3, [r2, #28]
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <HAL_MspInit+0x5c>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_MspInit+0x60>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_MspInit+0x60>)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000

080011e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f8:	d114      	bne.n	8001224 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <HAL_TIM_Base_MspInit+0x78>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a18      	ldr	r2, [pc, #96]	; (8001260 <HAL_TIM_Base_MspInit+0x78>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_TIM_Base_MspInit+0x78>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	201c      	movs	r0, #28
 8001218:	f000 fa8b 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800121c:	201c      	movs	r0, #28
 800121e:	f000 faa4 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001222:	e018      	b.n	8001256 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_TIM_Base_MspInit+0x7c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d113      	bne.n	8001256 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_TIM_Base_MspInit+0x78>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <HAL_TIM_Base_MspInit+0x78>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_TIM_Base_MspInit+0x78>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	201d      	movs	r0, #29
 800124c:	f000 fa71 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001250:	201d      	movs	r0, #29
 8001252:	f000 fa8a 	bl	800176a <HAL_NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	40000400 	.word	0x40000400

08001268 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <HAL_TIM_MspPostInit+0x58>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d117      	bne.n	80012b8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_TIM_MspPostInit+0x5c>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_TIM_MspPostInit+0x5c>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_TIM_MspPostInit+0x5c>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012a0:	2340      	movs	r3, #64	; 0x40
 80012a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4619      	mov	r1, r3
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <HAL_TIM_MspPostInit+0x60>)
 80012b4:	f000 fb24 	bl	8001900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40000400 	.word	0x40000400
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010800 	.word	0x40010800

080012cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <HAL_UART_MspInit+0x98>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d137      	bne.n	800135c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <HAL_UART_MspInit+0x9c>)
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <HAL_UART_MspInit+0x9c>)
 80012f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f6:	61d3      	str	r3, [r2, #28]
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_UART_MspInit+0x9c>)
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_UART_MspInit+0x9c>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a17      	ldr	r2, [pc, #92]	; (8001368 <HAL_UART_MspInit+0x9c>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_UART_MspInit+0x9c>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800131c:	2304      	movs	r3, #4
 800131e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4619      	mov	r1, r3
 800132e:	480f      	ldr	r0, [pc, #60]	; (800136c <HAL_UART_MspInit+0xa0>)
 8001330:	f000 fae6 	bl	8001900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001334:	2308      	movs	r3, #8
 8001336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4619      	mov	r1, r3
 8001346:	4809      	ldr	r0, [pc, #36]	; (800136c <HAL_UART_MspInit+0xa0>)
 8001348:	f000 fada 	bl	8001900 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	2026      	movs	r0, #38	; 0x26
 8001352:	f000 f9ee 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001356:	2026      	movs	r0, #38	; 0x26
 8001358:	f000 fa07 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40004400 	.word	0x40004400
 8001368:	40021000 	.word	0x40021000
 800136c:	40010800 	.word	0x40010800

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <NMI_Handler+0x4>

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b6:	f000 f8c9 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <TIM2_IRQHandler+0x10>)
 80013c6:	f001 fa05 	bl	80027d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200000d4 	.word	0x200000d4

080013d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <TIM3_IRQHandler+0x10>)
 80013da:	f001 f9fb 	bl	80027d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000011c 	.word	0x2000011c

080013e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <USART2_IRQHandler+0x10>)
 80013ee:	f002 f893 	bl	8003518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000164 	.word	0x20000164

080013fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <_sbrk+0x5c>)
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <_sbrk+0x60>)
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <_sbrk+0x64>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <_sbrk+0x68>)
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	429a      	cmp	r2, r3
 800142a:	d207      	bcs.n	800143c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800142c:	f002 fc6c 	bl	8003d08 <__errno>
 8001430:	4603      	mov	r3, r0
 8001432:	220c      	movs	r2, #12
 8001434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	e009      	b.n	8001450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <_sbrk+0x64>)
 800144c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20005000 	.word	0x20005000
 800145c:	00000400 	.word	0x00000400
 8001460:	20000504 	.word	0x20000504
 8001464:	20000520 	.word	0x20000520

08001468 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001476:	490d      	ldr	r1, [pc, #52]	; (80014ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800148c:	4c0a      	ldr	r4, [pc, #40]	; (80014b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800149a:	f7ff ffe5 	bl	8001468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149e:	f002 fc39 	bl	8003d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a2:	f7ff f9c7 	bl	8000834 <main>
  bx lr
 80014a6:	4770      	bx	lr
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80014b0:	080046f8 	.word	0x080046f8
  ldr r2, =_sbss
 80014b4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80014b8:	2000051c 	.word	0x2000051c

080014bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC1_2_IRQHandler>
	...

080014c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_Init+0x28>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_Init+0x28>)
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 f923 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d6:	200f      	movs	r0, #15
 80014d8:	f000 f808 	bl	80014ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014dc:	f7ff fe52 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x54>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x58>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f93b 	bl	8001786 <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00e      	b.n	8001538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d80a      	bhi.n	8001536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f000 f903 	bl	8001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800152c:	4a06      	ldr	r2, [pc, #24]	; (8001548 <HAL_InitTick+0x5c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000020 	.word	0x20000020
 8001544:	20000028 	.word	0x20000028
 8001548:	20000024 	.word	0x20000024

0800154c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_IncTick+0x1c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x20>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <HAL_IncTick+0x20>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	20000028 	.word	0x20000028
 800156c:	20000508 	.word	0x20000508

08001570 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b02      	ldr	r3, [pc, #8]	; (8001580 <HAL_GetTick+0x10>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000508 	.word	0x20000508

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4906      	ldr	r1, [pc, #24]	; (800161c <__NVIC_EnableIRQ+0x34>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	; (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
         );
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff90 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff2d 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff42 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff90 	bl	8001674 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5f 	bl	8001620 <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff35 	bl	80015e8 <__NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffa2 	bl	80016d8 <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d008      	beq.n	80017c6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2204      	movs	r2, #4
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e020      	b.n	8001808 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 020e 	bic.w	r2, r2, #14
 80017d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0201 	bic.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ee:	2101      	movs	r1, #1
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
	...

08001814 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001826:	2b02      	cmp	r3, #2
 8001828:	d005      	beq.n	8001836 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2204      	movs	r2, #4
 800182e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e051      	b.n	80018da <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 020e 	bic.w	r2, r2, #14
 8001844:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0201 	bic.w	r2, r2, #1
 8001854:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <HAL_DMA_Abort_IT+0xd0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d029      	beq.n	80018b4 <HAL_DMA_Abort_IT+0xa0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a20      	ldr	r2, [pc, #128]	; (80018e8 <HAL_DMA_Abort_IT+0xd4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d022      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x9c>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <HAL_DMA_Abort_IT+0xd8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d01a      	beq.n	80018aa <HAL_DMA_Abort_IT+0x96>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <HAL_DMA_Abort_IT+0xdc>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d012      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x90>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <HAL_DMA_Abort_IT+0xe0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d00a      	beq.n	800189e <HAL_DMA_Abort_IT+0x8a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1a      	ldr	r2, [pc, #104]	; (80018f8 <HAL_DMA_Abort_IT+0xe4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d102      	bne.n	8001898 <HAL_DMA_Abort_IT+0x84>
 8001892:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001896:	e00e      	b.n	80018b6 <HAL_DMA_Abort_IT+0xa2>
 8001898:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800189c:	e00b      	b.n	80018b6 <HAL_DMA_Abort_IT+0xa2>
 800189e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a2:	e008      	b.n	80018b6 <HAL_DMA_Abort_IT+0xa2>
 80018a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a8:	e005      	b.n	80018b6 <HAL_DMA_Abort_IT+0xa2>
 80018aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ae:	e002      	b.n	80018b6 <HAL_DMA_Abort_IT+0xa2>
 80018b0:	2310      	movs	r3, #16
 80018b2:	e000      	b.n	80018b6 <HAL_DMA_Abort_IT+0xa2>
 80018b4:	2301      	movs	r3, #1
 80018b6:	4a11      	ldr	r2, [pc, #68]	; (80018fc <HAL_DMA_Abort_IT+0xe8>)
 80018b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	4798      	blx	r3
    } 
  }
  return status;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40020008 	.word	0x40020008
 80018e8:	4002001c 	.word	0x4002001c
 80018ec:	40020030 	.word	0x40020030
 80018f0:	40020044 	.word	0x40020044
 80018f4:	40020058 	.word	0x40020058
 80018f8:	4002006c 	.word	0x4002006c
 80018fc:	40020000 	.word	0x40020000

08001900 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001900:	b480      	push	{r7}
 8001902:	b08b      	sub	sp, #44	; 0x2c
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001912:	e169      	b.n	8001be8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001914:	2201      	movs	r2, #1
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	429a      	cmp	r2, r3
 800192e:	f040 8158 	bne.w	8001be2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4a9a      	ldr	r2, [pc, #616]	; (8001ba0 <HAL_GPIO_Init+0x2a0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d05e      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 800193c:	4a98      	ldr	r2, [pc, #608]	; (8001ba0 <HAL_GPIO_Init+0x2a0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d875      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 8001942:	4a98      	ldr	r2, [pc, #608]	; (8001ba4 <HAL_GPIO_Init+0x2a4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d058      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 8001948:	4a96      	ldr	r2, [pc, #600]	; (8001ba4 <HAL_GPIO_Init+0x2a4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d86f      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 800194e:	4a96      	ldr	r2, [pc, #600]	; (8001ba8 <HAL_GPIO_Init+0x2a8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d052      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 8001954:	4a94      	ldr	r2, [pc, #592]	; (8001ba8 <HAL_GPIO_Init+0x2a8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d869      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 800195a:	4a94      	ldr	r2, [pc, #592]	; (8001bac <HAL_GPIO_Init+0x2ac>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d04c      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 8001960:	4a92      	ldr	r2, [pc, #584]	; (8001bac <HAL_GPIO_Init+0x2ac>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d863      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 8001966:	4a92      	ldr	r2, [pc, #584]	; (8001bb0 <HAL_GPIO_Init+0x2b0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d046      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 800196c:	4a90      	ldr	r2, [pc, #576]	; (8001bb0 <HAL_GPIO_Init+0x2b0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d85d      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 8001972:	2b12      	cmp	r3, #18
 8001974:	d82a      	bhi.n	80019cc <HAL_GPIO_Init+0xcc>
 8001976:	2b12      	cmp	r3, #18
 8001978:	d859      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 800197a:	a201      	add	r2, pc, #4	; (adr r2, 8001980 <HAL_GPIO_Init+0x80>)
 800197c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001980:	080019fb 	.word	0x080019fb
 8001984:	080019d5 	.word	0x080019d5
 8001988:	080019e7 	.word	0x080019e7
 800198c:	08001a29 	.word	0x08001a29
 8001990:	08001a2f 	.word	0x08001a2f
 8001994:	08001a2f 	.word	0x08001a2f
 8001998:	08001a2f 	.word	0x08001a2f
 800199c:	08001a2f 	.word	0x08001a2f
 80019a0:	08001a2f 	.word	0x08001a2f
 80019a4:	08001a2f 	.word	0x08001a2f
 80019a8:	08001a2f 	.word	0x08001a2f
 80019ac:	08001a2f 	.word	0x08001a2f
 80019b0:	08001a2f 	.word	0x08001a2f
 80019b4:	08001a2f 	.word	0x08001a2f
 80019b8:	08001a2f 	.word	0x08001a2f
 80019bc:	08001a2f 	.word	0x08001a2f
 80019c0:	08001a2f 	.word	0x08001a2f
 80019c4:	080019dd 	.word	0x080019dd
 80019c8:	080019f1 	.word	0x080019f1
 80019cc:	4a79      	ldr	r2, [pc, #484]	; (8001bb4 <HAL_GPIO_Init+0x2b4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019d2:	e02c      	b.n	8001a2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	623b      	str	r3, [r7, #32]
          break;
 80019da:	e029      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	3304      	adds	r3, #4
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	e024      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	3308      	adds	r3, #8
 80019ec:	623b      	str	r3, [r7, #32]
          break;
 80019ee:	e01f      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	330c      	adds	r3, #12
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e01a      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a02:	2304      	movs	r3, #4
 8001a04:	623b      	str	r3, [r7, #32]
          break;
 8001a06:	e013      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d105      	bne.n	8001a1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a10:	2308      	movs	r3, #8
 8001a12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	611a      	str	r2, [r3, #16]
          break;
 8001a1a:	e009      	b.n	8001a30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	615a      	str	r2, [r3, #20]
          break;
 8001a26:	e003      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	e000      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          break;
 8001a2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2bff      	cmp	r3, #255	; 0xff
 8001a34:	d801      	bhi.n	8001a3a <HAL_GPIO_Init+0x13a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	e001      	b.n	8001a3e <HAL_GPIO_Init+0x13e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2bff      	cmp	r3, #255	; 0xff
 8001a44:	d802      	bhi.n	8001a4c <HAL_GPIO_Init+0x14c>
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	e002      	b.n	8001a52 <HAL_GPIO_Init+0x152>
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	3b08      	subs	r3, #8
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	210f      	movs	r1, #15
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	401a      	ands	r2, r3
 8001a64:	6a39      	ldr	r1, [r7, #32]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 80b1 	beq.w	8001be2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a80:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a4c      	ldr	r2, [pc, #304]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a98:	4a48      	ldr	r2, [pc, #288]	; (8001bbc <HAL_GPIO_Init+0x2bc>)
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a40      	ldr	r2, [pc, #256]	; (8001bc0 <HAL_GPIO_Init+0x2c0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d013      	beq.n	8001aec <HAL_GPIO_Init+0x1ec>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a3f      	ldr	r2, [pc, #252]	; (8001bc4 <HAL_GPIO_Init+0x2c4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d00d      	beq.n	8001ae8 <HAL_GPIO_Init+0x1e8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a3e      	ldr	r2, [pc, #248]	; (8001bc8 <HAL_GPIO_Init+0x2c8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d007      	beq.n	8001ae4 <HAL_GPIO_Init+0x1e4>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a3d      	ldr	r2, [pc, #244]	; (8001bcc <HAL_GPIO_Init+0x2cc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d101      	bne.n	8001ae0 <HAL_GPIO_Init+0x1e0>
 8001adc:	2303      	movs	r3, #3
 8001ade:	e006      	b.n	8001aee <HAL_GPIO_Init+0x1ee>
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	e004      	b.n	8001aee <HAL_GPIO_Init+0x1ee>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e002      	b.n	8001aee <HAL_GPIO_Init+0x1ee>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_GPIO_Init+0x1ee>
 8001aec:	2300      	movs	r3, #0
 8001aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af0:	f002 0203 	and.w	r2, r2, #3
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	4093      	lsls	r3, r2
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001afe:	492f      	ldr	r1, [pc, #188]	; (8001bbc <HAL_GPIO_Init+0x2bc>)
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	3302      	adds	r3, #2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	492c      	ldr	r1, [pc, #176]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b26:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4928      	ldr	r1, [pc, #160]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b40:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4922      	ldr	r1, [pc, #136]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	491e      	ldr	r1, [pc, #120]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4918      	ldr	r1, [pc, #96]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	4914      	ldr	r1, [pc, #80]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d021      	beq.n	8001bd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
 8001b9c:	e021      	b.n	8001be2 <HAL_GPIO_Init+0x2e2>
 8001b9e:	bf00      	nop
 8001ba0:	10320000 	.word	0x10320000
 8001ba4:	10310000 	.word	0x10310000
 8001ba8:	10220000 	.word	0x10220000
 8001bac:	10210000 	.word	0x10210000
 8001bb0:	10120000 	.word	0x10120000
 8001bb4:	10110000 	.word	0x10110000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	40010800 	.word	0x40010800
 8001bc4:	40010c00 	.word	0x40010c00
 8001bc8:	40011000 	.word	0x40011000
 8001bcc:	40011400 	.word	0x40011400
 8001bd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	4909      	ldr	r1, [pc, #36]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	3301      	adds	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f ae8e 	bne.w	8001914 <HAL_GPIO_Init+0x14>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	372c      	adds	r7, #44	; 0x2c
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	887b      	ldrh	r3, [r7, #2]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e001      	b.n	8001c2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	807b      	strh	r3, [r7, #2]
 8001c42:	4613      	mov	r3, r2
 8001c44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c46:	787b      	ldrb	r3, [r7, #1]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4c:	887a      	ldrh	r2, [r7, #2]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c52:	e003      	b.n	8001c5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	041a      	lsls	r2, r3, #16
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	611a      	str	r2, [r3, #16]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e272      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8087 	beq.w	8001d96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c88:	4b92      	ldr	r3, [pc, #584]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d00c      	beq.n	8001cae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c94:	4b8f      	ldr	r3, [pc, #572]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d112      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x5e>
 8001ca0:	4b8c      	ldr	r3, [pc, #560]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d10b      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cae:	4b89      	ldr	r3, [pc, #548]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d06c      	beq.n	8001d94 <HAL_RCC_OscConfig+0x12c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d168      	bne.n	8001d94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e24c      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x76>
 8001cd0:	4b80      	ldr	r3, [pc, #512]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a7f      	ldr	r2, [pc, #508]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	e02e      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x98>
 8001ce6:	4b7b      	ldr	r3, [pc, #492]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a7a      	ldr	r2, [pc, #488]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b78      	ldr	r3, [pc, #480]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a77      	ldr	r2, [pc, #476]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e01d      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0xbc>
 8001d0a:	4b72      	ldr	r3, [pc, #456]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a71      	ldr	r2, [pc, #452]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b6f      	ldr	r3, [pc, #444]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6e      	ldr	r2, [pc, #440]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e00b      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001d24:	4b6b      	ldr	r3, [pc, #428]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a6a      	ldr	r2, [pc, #424]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b68      	ldr	r3, [pc, #416]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a67      	ldr	r2, [pc, #412]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fc14 	bl	8001570 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fc10 	bl	8001570 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e200      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0xe4>
 8001d6a:	e014      	b.n	8001d96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fc00 	bl	8001570 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff fbfc 	bl	8001570 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1ec      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x10c>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d063      	beq.n	8001e6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da2:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dae:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d11c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x18c>
 8001dba:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d116      	bne.n	8001df4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_RCC_OscConfig+0x176>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e1c0      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4939      	ldr	r1, [pc, #228]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df2:	e03a      	b.n	8001e6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fbb5 	bl	8001570 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fbb1 	bl	8001570 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e1a1      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4927      	ldr	r1, [pc, #156]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fb94 	bl	8001570 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fb90 	bl	8001570 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e180      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d03a      	beq.n	8001eec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d019      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <HAL_RCC_OscConfig+0x274>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7ff fb74 	bl	8001570 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7ff fb70 	bl	8001570 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e160      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f000 fad8 	bl	8002460 <RCC_Delay>
 8001eb0:	e01c      	b.n	8001eec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_RCC_OscConfig+0x274>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fb5a 	bl	8001570 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebe:	e00f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fb56 	bl	8001570 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d908      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e146      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	42420000 	.word	0x42420000
 8001edc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	4b92      	ldr	r3, [pc, #584]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e9      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a6 	beq.w	8002046 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efe:	4b8b      	ldr	r3, [pc, #556]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10d      	bne.n	8001f26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b88      	ldr	r3, [pc, #544]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a87      	ldr	r2, [pc, #540]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	61d3      	str	r3, [r2, #28]
 8001f16:	4b85      	ldr	r3, [pc, #532]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f26:	4b82      	ldr	r3, [pc, #520]	; (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d118      	bne.n	8001f64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f32:	4b7f      	ldr	r3, [pc, #508]	; (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7e      	ldr	r2, [pc, #504]	; (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fb17 	bl	8001570 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f46:	f7ff fb13 	bl	8001570 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b64      	cmp	r3, #100	; 0x64
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e103      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	4b75      	ldr	r3, [pc, #468]	; (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x312>
 8001f6c:	4b6f      	ldr	r3, [pc, #444]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4a6e      	ldr	r2, [pc, #440]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6213      	str	r3, [r2, #32]
 8001f78:	e02d      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x334>
 8001f82:	4b6a      	ldr	r3, [pc, #424]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a69      	ldr	r2, [pc, #420]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	4b67      	ldr	r3, [pc, #412]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a66      	ldr	r2, [pc, #408]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	e01c      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d10c      	bne.n	8001fbe <HAL_RCC_OscConfig+0x356>
 8001fa4:	4b61      	ldr	r3, [pc, #388]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4a60      	ldr	r2, [pc, #384]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	6213      	str	r3, [r2, #32]
 8001fb0:	4b5e      	ldr	r3, [pc, #376]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a5d      	ldr	r2, [pc, #372]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	e00b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001fbe:	4b5b      	ldr	r3, [pc, #364]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a5a      	ldr	r2, [pc, #360]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	4b58      	ldr	r3, [pc, #352]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a57      	ldr	r2, [pc, #348]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d015      	beq.n	800200a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7ff fac7 	bl	8001570 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff fac3 	bl	8001570 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0b1      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ee      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x37e>
 8002008:	e014      	b.n	8002034 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7ff fab1 	bl	8001570 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff faad 	bl	8001570 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e09b      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	4b40      	ldr	r3, [pc, #256]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1ee      	bne.n	8002012 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d105      	bne.n	8002046 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203a:	4b3c      	ldr	r3, [pc, #240]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4a3b      	ldr	r2, [pc, #236]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002044:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8087 	beq.w	800215e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002050:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d061      	beq.n	8002120 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d146      	bne.n	80020f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002064:	4b33      	ldr	r3, [pc, #204]	; (8002134 <HAL_RCC_OscConfig+0x4cc>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7ff fa81 	bl	8001570 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7ff fa7d 	bl	8001570 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e06d      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002098:	d108      	bne.n	80020ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	4921      	ldr	r1, [pc, #132]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a19      	ldr	r1, [r3, #32]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	430b      	orrs	r3, r1
 80020be:	491b      	ldr	r1, [pc, #108]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_RCC_OscConfig+0x4cc>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7ff fa51 	bl	8001570 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff fa4d 	bl	8001570 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e03d      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x46a>
 80020f0:	e035      	b.n	800215e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_RCC_OscConfig+0x4cc>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff fa3a 	bl	8001570 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002100:	f7ff fa36 	bl	8001570 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e026      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x498>
 800211e:	e01e      	b.n	800215e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d107      	bne.n	8002138 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e019      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
 8002134:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_RCC_OscConfig+0x500>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	429a      	cmp	r2, r3
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000

0800216c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0d0      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4965      	ldr	r1, [pc, #404]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d040      	beq.n	800228c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d115      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e073      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06b      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224a:	4b39      	ldr	r3, [pc, #228]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4936      	ldr	r1, [pc, #216]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800225c:	f7ff f988 	bl	8001570 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7ff f984 	bl	8001570 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e053      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 020c 	and.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	429a      	cmp	r2, r3
 800228a:	d1eb      	bne.n	8002264 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d210      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0207 	bic.w	r2, r3, #7
 80022a2:	4922      	ldr	r1, [pc, #136]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1cc>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1d0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f8e6 	bl	80014ec <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40022000 	.word	0x40022000
 8002330:	40021000 	.word	0x40021000
 8002334:	080046a4 	.word	0x080046a4
 8002338:	20000020 	.word	0x20000020
 800233c:	20000024 	.word	0x20000024

08002340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b490      	push	{r4, r7}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002346:	4b29      	ldr	r3, [pc, #164]	; (80023ec <HAL_RCC_GetSysClockFreq+0xac>)
 8002348:	1d3c      	adds	r4, r7, #4
 800234a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800234c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002350:	f240 2301 	movw	r3, #513	; 0x201
 8002354:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800236a:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b04      	cmp	r3, #4
 8002378:	d002      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x40>
 800237a:	2b08      	cmp	r3, #8
 800237c:	d003      	beq.n	8002386 <HAL_RCC_GetSysClockFreq+0x46>
 800237e:	e02b      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002382:	623b      	str	r3, [r7, #32]
      break;
 8002384:	e02b      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	0c9b      	lsrs	r3, r3, #18
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3328      	adds	r3, #40	; 0x28
 8002390:	443b      	add	r3, r7
 8002392:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002396:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d012      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023a2:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	0c5b      	lsrs	r3, r3, #17
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	3328      	adds	r3, #40	; 0x28
 80023ae:	443b      	add	r3, r7
 80023b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023ba:	fb03 f202 	mul.w	r2, r3, r2
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	e004      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	623b      	str	r3, [r7, #32]
      break;
 80023d6:	e002      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023da:	623b      	str	r3, [r7, #32]
      break;
 80023dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023de:	6a3b      	ldr	r3, [r7, #32]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3728      	adds	r7, #40	; 0x28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc90      	pop	{r4, r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	08004694 	.word	0x08004694
 80023f0:	40021000 	.word	0x40021000
 80023f4:	007a1200 	.word	0x007a1200
 80023f8:	003d0900 	.word	0x003d0900

080023fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002400:	4b02      	ldr	r3, [pc, #8]	; (800240c <HAL_RCC_GetHCLKFreq+0x10>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	20000020 	.word	0x20000020

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002414:	f7ff fff2 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4903      	ldr	r1, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	080046b4 	.word	0x080046b4

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800243c:	f7ff ffde 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	0adb      	lsrs	r3, r3, #11
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4903      	ldr	r1, [pc, #12]	; (800245c <HAL_RCC_GetPCLK2Freq+0x24>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	080046b4 	.word	0x080046b4

08002460 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <RCC_Delay+0x34>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <RCC_Delay+0x38>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0a5b      	lsrs	r3, r3, #9
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800247c:	bf00      	nop
  }
  while (Delay --);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1e5a      	subs	r2, r3, #1
 8002482:	60fa      	str	r2, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f9      	bne.n	800247c <RCC_Delay+0x1c>
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	20000020 	.word	0x20000020
 8002498:	10624dd3 	.word	0x10624dd3

0800249c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e041      	b.n	8002532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe fe90 	bl	80011e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f000 fc28 	bl	8002d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d001      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e03a      	b.n	80025ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a18      	ldr	r2, [pc, #96]	; (80025d4 <HAL_TIM_Base_Start_IT+0x98>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00e      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x58>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257e:	d009      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x58>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d004      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x58>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a13      	ldr	r2, [pc, #76]	; (80025dc <HAL_TIM_Base_Start_IT+0xa0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d111      	bne.n	80025b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d010      	beq.n	80025c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0201 	orr.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b6:	e007      	b.n	80025c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	40012c00 	.word	0x40012c00
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40000800 	.word	0x40000800

080025e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e041      	b.n	8002676 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f839 	bl	800267e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3304      	adds	r3, #4
 800261c:	4619      	mov	r1, r3
 800261e:	4610      	mov	r0, r2
 8002620:	f000 fb86 	bl	8002d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d109      	bne.n	80026b4 <HAL_TIM_PWM_Start+0x24>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e022      	b.n	80026fa <HAL_TIM_PWM_Start+0x6a>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d109      	bne.n	80026ce <HAL_TIM_PWM_Start+0x3e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	bf14      	ite	ne
 80026c6:	2301      	movne	r3, #1
 80026c8:	2300      	moveq	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	e015      	b.n	80026fa <HAL_TIM_PWM_Start+0x6a>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d109      	bne.n	80026e8 <HAL_TIM_PWM_Start+0x58>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e008      	b.n	80026fa <HAL_TIM_PWM_Start+0x6a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e05e      	b.n	80027c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d104      	bne.n	8002712 <HAL_TIM_PWM_Start+0x82>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002710:	e013      	b.n	800273a <HAL_TIM_PWM_Start+0xaa>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d104      	bne.n	8002722 <HAL_TIM_PWM_Start+0x92>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002720:	e00b      	b.n	800273a <HAL_TIM_PWM_Start+0xaa>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d104      	bne.n	8002732 <HAL_TIM_PWM_Start+0xa2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002730:	e003      	b.n	800273a <HAL_TIM_PWM_Start+0xaa>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2201      	movs	r2, #1
 8002740:	6839      	ldr	r1, [r7, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fd74 	bl	8003230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1e      	ldr	r2, [pc, #120]	; (80027c8 <HAL_TIM_PWM_Start+0x138>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d107      	bne.n	8002762 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002760:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <HAL_TIM_PWM_Start+0x138>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00e      	beq.n	800278a <HAL_TIM_PWM_Start+0xfa>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002774:	d009      	beq.n	800278a <HAL_TIM_PWM_Start+0xfa>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a14      	ldr	r2, [pc, #80]	; (80027cc <HAL_TIM_PWM_Start+0x13c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d004      	beq.n	800278a <HAL_TIM_PWM_Start+0xfa>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <HAL_TIM_PWM_Start+0x140>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d111      	bne.n	80027ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b06      	cmp	r3, #6
 800279a:	d010      	beq.n	80027be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ac:	e007      	b.n	80027be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40012c00 	.word	0x40012c00
 80027cc:	40000400 	.word	0x40000400
 80027d0:	40000800 	.word	0x40000800

080027d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d122      	bne.n	8002830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d11b      	bne.n	8002830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0202 	mvn.w	r2, #2
 8002800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa6f 	bl	8002cfa <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fa62 	bl	8002ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fa71 	bl	8002d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b04      	cmp	r3, #4
 800283c:	d122      	bne.n	8002884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d11b      	bne.n	8002884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0204 	mvn.w	r2, #4
 8002854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2202      	movs	r2, #2
 800285a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fa45 	bl	8002cfa <HAL_TIM_IC_CaptureCallback>
 8002870:	e005      	b.n	800287e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fa38 	bl	8002ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fa47 	bl	8002d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b08      	cmp	r3, #8
 8002890:	d122      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b08      	cmp	r3, #8
 800289e:	d11b      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0208 	mvn.w	r2, #8
 80028a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2204      	movs	r2, #4
 80028ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa1b 	bl	8002cfa <HAL_TIM_IC_CaptureCallback>
 80028c4:	e005      	b.n	80028d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fa0e 	bl	8002ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fa1d 	bl	8002d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d122      	bne.n	800292c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d11b      	bne.n	800292c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0210 	mvn.w	r2, #16
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2208      	movs	r2, #8
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f9f1 	bl	8002cfa <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f9e4 	bl	8002ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f9f3 	bl	8002d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d10e      	bne.n	8002958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d107      	bne.n	8002958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0201 	mvn.w	r2, #1
 8002950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fc06 	bl	8001164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d10e      	bne.n	8002984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002970:	2b80      	cmp	r3, #128	; 0x80
 8002972:	d107      	bne.n	8002984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800297c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fce1 	bl	8003346 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	2b40      	cmp	r3, #64	; 0x40
 8002990:	d10e      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d107      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f9b7 	bl	8002d1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d10e      	bne.n	80029dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d107      	bne.n	80029dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0220 	mvn.w	r2, #32
 80029d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fcac 	bl	8003334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e0ac      	b.n	8002b58 <HAL_TIM_PWM_ConfigChannel+0x174>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b0c      	cmp	r3, #12
 8002a0a:	f200 809f 	bhi.w	8002b4c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002a0e:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a14:	08002a49 	.word	0x08002a49
 8002a18:	08002b4d 	.word	0x08002b4d
 8002a1c:	08002b4d 	.word	0x08002b4d
 8002a20:	08002b4d 	.word	0x08002b4d
 8002a24:	08002a89 	.word	0x08002a89
 8002a28:	08002b4d 	.word	0x08002b4d
 8002a2c:	08002b4d 	.word	0x08002b4d
 8002a30:	08002b4d 	.word	0x08002b4d
 8002a34:	08002acb 	.word	0x08002acb
 8002a38:	08002b4d 	.word	0x08002b4d
 8002a3c:	08002b4d 	.word	0x08002b4d
 8002a40:	08002b4d 	.word	0x08002b4d
 8002a44:	08002b0b 	.word	0x08002b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f9d0 	bl	8002df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0208 	orr.w	r2, r2, #8
 8002a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0204 	bic.w	r2, r2, #4
 8002a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6999      	ldr	r1, [r3, #24]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	619a      	str	r2, [r3, #24]
      break;
 8002a86:	e062      	b.n	8002b4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fa16 	bl	8002ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6999      	ldr	r1, [r3, #24]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	021a      	lsls	r2, r3, #8
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	619a      	str	r2, [r3, #24]
      break;
 8002ac8:	e041      	b.n	8002b4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fa5f 	bl	8002f94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0208 	orr.w	r2, r2, #8
 8002ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0204 	bic.w	r2, r2, #4
 8002af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69d9      	ldr	r1, [r3, #28]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	61da      	str	r2, [r3, #28]
      break;
 8002b08:	e021      	b.n	8002b4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 faa9 	bl	8003068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69da      	ldr	r2, [r3, #28]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69d9      	ldr	r1, [r3, #28]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	021a      	lsls	r2, r3, #8
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	61da      	str	r2, [r3, #28]
      break;
 8002b4a:	e000      	b.n	8002b4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_TIM_ConfigClockSource+0x18>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e0b3      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x180>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb0:	d03e      	beq.n	8002c30 <HAL_TIM_ConfigClockSource+0xd0>
 8002bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb6:	f200 8087 	bhi.w	8002cc8 <HAL_TIM_ConfigClockSource+0x168>
 8002bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbe:	f000 8085 	beq.w	8002ccc <HAL_TIM_ConfigClockSource+0x16c>
 8002bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc6:	d87f      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x168>
 8002bc8:	2b70      	cmp	r3, #112	; 0x70
 8002bca:	d01a      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0xa2>
 8002bcc:	2b70      	cmp	r3, #112	; 0x70
 8002bce:	d87b      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x168>
 8002bd0:	2b60      	cmp	r3, #96	; 0x60
 8002bd2:	d050      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x116>
 8002bd4:	2b60      	cmp	r3, #96	; 0x60
 8002bd6:	d877      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x168>
 8002bd8:	2b50      	cmp	r3, #80	; 0x50
 8002bda:	d03c      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0xf6>
 8002bdc:	2b50      	cmp	r3, #80	; 0x50
 8002bde:	d873      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x168>
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d058      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x136>
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d86f      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x168>
 8002be8:	2b30      	cmp	r3, #48	; 0x30
 8002bea:	d064      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x156>
 8002bec:	2b30      	cmp	r3, #48	; 0x30
 8002bee:	d86b      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x168>
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d060      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x156>
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d867      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x168>
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d05c      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x156>
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d05a      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c00:	e062      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f000 faee 	bl	80031f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	609a      	str	r2, [r3, #8]
      break;
 8002c2e:	e04e      	b.n	8002cce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	6899      	ldr	r1, [r3, #8]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f000 fad7 	bl	80031f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c52:	609a      	str	r2, [r3, #8]
      break;
 8002c54:	e03b      	b.n	8002cce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f000 fa4e 	bl	8003104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2150      	movs	r1, #80	; 0x50
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 faa5 	bl	80031be <TIM_ITRx_SetConfig>
      break;
 8002c74:	e02b      	b.n	8002cce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f000 fa6c 	bl	8003160 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2160      	movs	r1, #96	; 0x60
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fa95 	bl	80031be <TIM_ITRx_SetConfig>
      break;
 8002c94:	e01b      	b.n	8002cce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f000 fa2e 	bl	8003104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2140      	movs	r1, #64	; 0x40
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fa85 	bl	80031be <TIM_ITRx_SetConfig>
      break;
 8002cb4:	e00b      	b.n	8002cce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f000 fa7c 	bl	80031be <TIM_ITRx_SetConfig>
        break;
 8002cc6:	e002      	b.n	8002cce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cc8:	bf00      	nop
 8002cca:	e000      	b.n	8002cce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ccc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <TIM_Base_SetConfig+0xb8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00b      	beq.n	8002d60 <TIM_Base_SetConfig+0x30>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4e:	d007      	beq.n	8002d60 <TIM_Base_SetConfig+0x30>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a26      	ldr	r2, [pc, #152]	; (8002dec <TIM_Base_SetConfig+0xbc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d003      	beq.n	8002d60 <TIM_Base_SetConfig+0x30>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a25      	ldr	r2, [pc, #148]	; (8002df0 <TIM_Base_SetConfig+0xc0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d108      	bne.n	8002d72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <TIM_Base_SetConfig+0xb8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00b      	beq.n	8002d92 <TIM_Base_SetConfig+0x62>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d007      	beq.n	8002d92 <TIM_Base_SetConfig+0x62>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a19      	ldr	r2, [pc, #100]	; (8002dec <TIM_Base_SetConfig+0xbc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d003      	beq.n	8002d92 <TIM_Base_SetConfig+0x62>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a18      	ldr	r2, [pc, #96]	; (8002df0 <TIM_Base_SetConfig+0xc0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d108      	bne.n	8002da4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <TIM_Base_SetConfig+0xb8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d103      	bne.n	8002dd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	615a      	str	r2, [r3, #20]
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800

08002df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f023 0201 	bic.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0303 	bic.w	r3, r3, #3
 8002e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f023 0302 	bic.w	r3, r3, #2
 8002e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <TIM_OC1_SetConfig+0xc8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d10c      	bne.n	8002e6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f023 0308 	bic.w	r3, r3, #8
 8002e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <TIM_OC1_SetConfig+0xc8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d111      	bne.n	8002e96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	621a      	str	r2, [r3, #32]
}
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40012c00 	.word	0x40012c00

08002ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f023 0210 	bic.w	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0320 	bic.w	r3, r3, #32
 8002f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <TIM_OC2_SetConfig+0xd0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d10d      	bne.n	8002f3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <TIM_OC2_SetConfig+0xd0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d113      	bne.n	8002f6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	621a      	str	r2, [r3, #32]
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40012c00 	.word	0x40012c00

08002f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0303 	bic.w	r3, r3, #3
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <TIM_OC3_SetConfig+0xd0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10d      	bne.n	800300e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800300c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a14      	ldr	r2, [pc, #80]	; (8003064 <TIM_OC3_SetConfig+0xd0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d113      	bne.n	800303e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800301c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	621a      	str	r2, [r3, #32]
}
 8003058:	bf00      	nop
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40012c00 	.word	0x40012c00

08003068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	031b      	lsls	r3, r3, #12
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a0f      	ldr	r2, [pc, #60]	; (8003100 <TIM_OC4_SetConfig+0x98>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d109      	bne.n	80030dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	019b      	lsls	r3, r3, #6
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	621a      	str	r2, [r3, #32]
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	40012c00 	.word	0x40012c00

08003104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f023 0201 	bic.w	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800312e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f023 030a 	bic.w	r3, r3, #10
 8003140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f023 0210 	bic.w	r2, r3, #16
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800318a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	031b      	lsls	r3, r3, #12
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800319c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	621a      	str	r2, [r3, #32]
}
 80031b4:	bf00      	nop
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	f043 0307 	orr.w	r3, r3, #7
 80031e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	609a      	str	r2, [r3, #8]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b087      	sub	sp, #28
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800320c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	021a      	lsls	r2, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	431a      	orrs	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4313      	orrs	r3, r2
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	609a      	str	r2, [r3, #8]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	2201      	movs	r2, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a1a      	ldr	r2, [r3, #32]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	43db      	mvns	r3, r3
 8003252:	401a      	ands	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a1a      	ldr	r2, [r3, #32]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	431a      	orrs	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800328c:	2302      	movs	r3, #2
 800328e:	e046      	b.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a16      	ldr	r2, [pc, #88]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00e      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d009      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a12      	ldr	r2, [pc, #72]	; (800332c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a10      	ldr	r2, [pc, #64]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d10c      	bne.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	4313      	orrs	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	40012c00 	.word	0x40012c00
 800332c:	40000400 	.word	0x40000400
 8003330:	40000800 	.word	0x40000800

08003334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e03f      	b.n	80033ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd ffa4 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2224      	movs	r2, #36	; 0x24
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800339a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fc25 	bl	8003bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b08a      	sub	sp, #40	; 0x28
 80033f6:	af02      	add	r7, sp, #8
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	d17c      	bne.n	800350c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_UART_Transmit+0x2c>
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e075      	b.n	800350e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_UART_Transmit+0x3e>
 800342c:	2302      	movs	r3, #2
 800342e:	e06e      	b.n	800350e <HAL_UART_Transmit+0x11c>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2221      	movs	r2, #33	; 0x21
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003446:	f7fe f893 	bl	8001570 <HAL_GetTick>
 800344a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	88fa      	ldrh	r2, [r7, #6]
 8003450:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	88fa      	ldrh	r2, [r7, #6]
 8003456:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003460:	d108      	bne.n	8003474 <HAL_UART_Transmit+0x82>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d104      	bne.n	8003474 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	e003      	b.n	800347c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003484:	e02a      	b.n	80034dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2200      	movs	r2, #0
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fa11 	bl	80038b8 <UART_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e036      	b.n	800350e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10b      	bne.n	80034be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	3302      	adds	r3, #2
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	e007      	b.n	80034ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	3301      	adds	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1cf      	bne.n	8003486 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2140      	movs	r1, #64	; 0x40
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f9e1 	bl	80038b8 <UART_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e006      	b.n	800350e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	; 0x28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10d      	bne.n	800356a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_UART_IRQHandler+0x52>
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fa99 	bl	8003a9a <UART_Receive_IT>
      return;
 8003568:	e17b      	b.n	8003862 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80b1 	beq.w	80036d4 <HAL_UART_IRQHandler+0x1bc>
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <HAL_UART_IRQHandler+0x70>
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80a6 	beq.w	80036d4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_UART_IRQHandler+0x90>
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_UART_IRQHandler+0xb0>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f043 0202 	orr.w	r2, r3, #2
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_UART_IRQHandler+0xd0>
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f043 0204 	orr.w	r2, r3, #4
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00f      	beq.n	8003612 <HAL_UART_IRQHandler+0xfa>
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d104      	bne.n	8003606 <HAL_UART_IRQHandler+0xee>
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f043 0208 	orr.w	r2, r3, #8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 811e 	beq.w	8003858 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_UART_IRQHandler+0x11e>
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fa32 	bl	8003a9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf14      	ite	ne
 8003644:	2301      	movne	r3, #1
 8003646:	2300      	moveq	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d102      	bne.n	800365e <HAL_UART_IRQHandler+0x146>
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d031      	beq.n	80036c2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f974 	bl	800394c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d023      	beq.n	80036ba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003680:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	2b00      	cmp	r3, #0
 8003688:	d013      	beq.n	80036b2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	4a76      	ldr	r2, [pc, #472]	; (8003868 <HAL_UART_IRQHandler+0x350>)
 8003690:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe f8bc 	bl	8001814 <HAL_DMA_Abort_IT>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d016      	beq.n	80036d0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036ac:	4610      	mov	r0, r2
 80036ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	e00e      	b.n	80036d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f8ec 	bl	8003890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b8:	e00a      	b.n	80036d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f8e8 	bl	8003890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c0:	e006      	b.n	80036d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f8e4 	bl	8003890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036ce:	e0c3      	b.n	8003858 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d0:	bf00      	nop
    return;
 80036d2:	e0c1      	b.n	8003858 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	2b01      	cmp	r3, #1
 80036da:	f040 80a1 	bne.w	8003820 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 809b 	beq.w	8003820 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 8095 	beq.w	8003820 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d04e      	beq.n	80037b8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003724:	8a3b      	ldrh	r3, [r7, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8098 	beq.w	800385c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003730:	8a3a      	ldrh	r2, [r7, #16]
 8003732:	429a      	cmp	r2, r3
 8003734:	f080 8092 	bcs.w	800385c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8a3a      	ldrh	r2, [r7, #16]
 800373c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b20      	cmp	r3, #32
 8003746:	d02b      	beq.n	80037a0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003756:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003776:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0210 	bic.w	r2, r2, #16
 8003794:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	4618      	mov	r0, r3
 800379c:	f7fd ffff 	bl	800179e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f876 	bl	80038a2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037b6:	e051      	b.n	800385c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d047      	beq.n	8003860 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80037d0:	8a7b      	ldrh	r3, [r7, #18]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d044      	beq.n	8003860 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037e4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0210 	bic.w	r2, r2, #16
 8003812:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003814:	8a7b      	ldrh	r3, [r7, #18]
 8003816:	4619      	mov	r1, r3
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f842 	bl	80038a2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800381e:	e01f      	b.n	8003860 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_UART_IRQHandler+0x324>
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f8c9 	bl	80039cc <UART_Transmit_IT>
    return;
 800383a:	e012      	b.n	8003862 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <HAL_UART_IRQHandler+0x34a>
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f90a 	bl	8003a6a <UART_EndTransmit_IT>
    return;
 8003856:	e004      	b.n	8003862 <HAL_UART_IRQHandler+0x34a>
    return;
 8003858:	bf00      	nop
 800385a:	e002      	b.n	8003862 <HAL_UART_IRQHandler+0x34a>
      return;
 800385c:	bf00      	nop
 800385e:	e000      	b.n	8003862 <HAL_UART_IRQHandler+0x34a>
      return;
 8003860:	bf00      	nop
  }
}
 8003862:	3728      	adds	r7, #40	; 0x28
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	080039a5 	.word	0x080039a5

0800386c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	460b      	mov	r3, r1
 80038ac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c8:	e02c      	b.n	8003924 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d028      	beq.n	8003924 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038d8:	f7fd fe4a 	bl	8001570 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d21d      	bcs.n	8003924 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e00f      	b.n	8003944 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4013      	ands	r3, r2
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	429a      	cmp	r2, r3
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	429a      	cmp	r2, r3
 8003940:	d0c3      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003962:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	2b01      	cmp	r3, #1
 800397a:	d107      	bne.n	800398c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0210 	bic.w	r2, r2, #16
 800398a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	631a      	str	r2, [r3, #48]	; 0x30
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f7ff ff66 	bl	8003890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b21      	cmp	r3, #33	; 0x21
 80039de:	d13e      	bne.n	8003a5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e8:	d114      	bne.n	8003a14 <UART_Transmit_IT+0x48>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d110      	bne.n	8003a14 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	1c9a      	adds	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	621a      	str	r2, [r3, #32]
 8003a12:	e008      	b.n	8003a26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	1c59      	adds	r1, r3, #1
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6211      	str	r1, [r2, #32]
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	4619      	mov	r1, r3
 8003a34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff feee 	bl	800386c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b086      	sub	sp, #24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b22      	cmp	r3, #34	; 0x22
 8003aac:	f040 8099 	bne.w	8003be2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	d117      	bne.n	8003aea <UART_Receive_IT+0x50>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d113      	bne.n	8003aea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae8:	e026      	b.n	8003b38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afc:	d007      	beq.n	8003b0e <UART_Receive_IT+0x74>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <UART_Receive_IT+0x82>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e008      	b.n	8003b2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4619      	mov	r1, r3
 8003b46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d148      	bne.n	8003bde <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0220 	bic.w	r2, r2, #32
 8003b5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d123      	bne.n	8003bd4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0210 	bic.w	r2, r2, #16
 8003ba0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d10a      	bne.n	8003bc6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fe68 	bl	80038a2 <HAL_UARTEx_RxEventCallback>
 8003bd2:	e002      	b.n	8003bda <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fe52 	bl	800387e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e002      	b.n	8003be4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c26:	f023 030c 	bic.w	r3, r3, #12
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	430b      	orrs	r3, r1
 8003c32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2c      	ldr	r2, [pc, #176]	; (8003d00 <UART_SetConfig+0x114>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d103      	bne.n	8003c5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c54:	f7fe fbf0 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	e002      	b.n	8003c62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c5c:	f7fe fbd8 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8003c60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009a      	lsls	r2, r3, #2
 8003c6c:	441a      	add	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	4a22      	ldr	r2, [pc, #136]	; (8003d04 <UART_SetConfig+0x118>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	0119      	lsls	r1, r3, #4
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	009a      	lsls	r2, r3, #2
 8003c8c:	441a      	add	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c98:	4b1a      	ldr	r3, [pc, #104]	; (8003d04 <UART_SetConfig+0x118>)
 8003c9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2064      	movs	r0, #100	; 0x64
 8003ca2:	fb00 f303 	mul.w	r3, r0, r3
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	3332      	adds	r3, #50	; 0x32
 8003cac:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <UART_SetConfig+0x118>)
 8003cae:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb8:	4419      	add	r1, r3
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009a      	lsls	r2, r3, #2
 8003cc4:	441a      	add	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <UART_SetConfig+0x118>)
 8003cd2:	fba3 0302 	umull	r0, r3, r3, r2
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	2064      	movs	r0, #100	; 0x64
 8003cda:	fb00 f303 	mul.w	r3, r0, r3
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	3332      	adds	r3, #50	; 0x32
 8003ce4:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <UART_SetConfig+0x118>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	f003 020f 	and.w	r2, r3, #15
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	440a      	add	r2, r1
 8003cf6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40013800 	.word	0x40013800
 8003d04:	51eb851f 	.word	0x51eb851f

08003d08 <__errno>:
 8003d08:	4b01      	ldr	r3, [pc, #4]	; (8003d10 <__errno+0x8>)
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	2000002c 	.word	0x2000002c

08003d14 <__libc_init_array>:
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	2600      	movs	r6, #0
 8003d18:	4d0c      	ldr	r5, [pc, #48]	; (8003d4c <__libc_init_array+0x38>)
 8003d1a:	4c0d      	ldr	r4, [pc, #52]	; (8003d50 <__libc_init_array+0x3c>)
 8003d1c:	1b64      	subs	r4, r4, r5
 8003d1e:	10a4      	asrs	r4, r4, #2
 8003d20:	42a6      	cmp	r6, r4
 8003d22:	d109      	bne.n	8003d38 <__libc_init_array+0x24>
 8003d24:	f000 fc9c 	bl	8004660 <_init>
 8003d28:	2600      	movs	r6, #0
 8003d2a:	4d0a      	ldr	r5, [pc, #40]	; (8003d54 <__libc_init_array+0x40>)
 8003d2c:	4c0a      	ldr	r4, [pc, #40]	; (8003d58 <__libc_init_array+0x44>)
 8003d2e:	1b64      	subs	r4, r4, r5
 8003d30:	10a4      	asrs	r4, r4, #2
 8003d32:	42a6      	cmp	r6, r4
 8003d34:	d105      	bne.n	8003d42 <__libc_init_array+0x2e>
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3c:	4798      	blx	r3
 8003d3e:	3601      	adds	r6, #1
 8003d40:	e7ee      	b.n	8003d20 <__libc_init_array+0xc>
 8003d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d46:	4798      	blx	r3
 8003d48:	3601      	adds	r6, #1
 8003d4a:	e7f2      	b.n	8003d32 <__libc_init_array+0x1e>
 8003d4c:	080046f0 	.word	0x080046f0
 8003d50:	080046f0 	.word	0x080046f0
 8003d54:	080046f0 	.word	0x080046f0
 8003d58:	080046f4 	.word	0x080046f4

08003d5c <memset>:
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4402      	add	r2, r0
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d100      	bne.n	8003d66 <memset+0xa>
 8003d64:	4770      	bx	lr
 8003d66:	f803 1b01 	strb.w	r1, [r3], #1
 8003d6a:	e7f9      	b.n	8003d60 <memset+0x4>

08003d6c <siprintf>:
 8003d6c:	b40e      	push	{r1, r2, r3}
 8003d6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d72:	b500      	push	{lr}
 8003d74:	b09c      	sub	sp, #112	; 0x70
 8003d76:	ab1d      	add	r3, sp, #116	; 0x74
 8003d78:	9002      	str	r0, [sp, #8]
 8003d7a:	9006      	str	r0, [sp, #24]
 8003d7c:	9107      	str	r1, [sp, #28]
 8003d7e:	9104      	str	r1, [sp, #16]
 8003d80:	4808      	ldr	r0, [pc, #32]	; (8003da4 <siprintf+0x38>)
 8003d82:	4909      	ldr	r1, [pc, #36]	; (8003da8 <siprintf+0x3c>)
 8003d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d88:	9105      	str	r1, [sp, #20]
 8003d8a:	6800      	ldr	r0, [r0, #0]
 8003d8c:	a902      	add	r1, sp, #8
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	f000 f868 	bl	8003e64 <_svfiprintf_r>
 8003d94:	2200      	movs	r2, #0
 8003d96:	9b02      	ldr	r3, [sp, #8]
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	b01c      	add	sp, #112	; 0x70
 8003d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003da0:	b003      	add	sp, #12
 8003da2:	4770      	bx	lr
 8003da4:	2000002c 	.word	0x2000002c
 8003da8:	ffff0208 	.word	0xffff0208

08003dac <__ssputs_r>:
 8003dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	688e      	ldr	r6, [r1, #8]
 8003db2:	4682      	mov	sl, r0
 8003db4:	429e      	cmp	r6, r3
 8003db6:	460c      	mov	r4, r1
 8003db8:	4690      	mov	r8, r2
 8003dba:	461f      	mov	r7, r3
 8003dbc:	d838      	bhi.n	8003e30 <__ssputs_r+0x84>
 8003dbe:	898a      	ldrh	r2, [r1, #12]
 8003dc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dc4:	d032      	beq.n	8003e2c <__ssputs_r+0x80>
 8003dc6:	6825      	ldr	r5, [r4, #0]
 8003dc8:	6909      	ldr	r1, [r1, #16]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	eba5 0901 	sub.w	r9, r5, r1
 8003dd0:	6965      	ldr	r5, [r4, #20]
 8003dd2:	444b      	add	r3, r9
 8003dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ddc:	106d      	asrs	r5, r5, #1
 8003dde:	429d      	cmp	r5, r3
 8003de0:	bf38      	it	cc
 8003de2:	461d      	movcc	r5, r3
 8003de4:	0553      	lsls	r3, r2, #21
 8003de6:	d531      	bpl.n	8003e4c <__ssputs_r+0xa0>
 8003de8:	4629      	mov	r1, r5
 8003dea:	f000 fb6f 	bl	80044cc <_malloc_r>
 8003dee:	4606      	mov	r6, r0
 8003df0:	b950      	cbnz	r0, 8003e08 <__ssputs_r+0x5c>
 8003df2:	230c      	movs	r3, #12
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	f8ca 3000 	str.w	r3, [sl]
 8003dfc:	89a3      	ldrh	r3, [r4, #12]
 8003dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e02:	81a3      	strh	r3, [r4, #12]
 8003e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e08:	464a      	mov	r2, r9
 8003e0a:	6921      	ldr	r1, [r4, #16]
 8003e0c:	f000 face 	bl	80043ac <memcpy>
 8003e10:	89a3      	ldrh	r3, [r4, #12]
 8003e12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1a:	81a3      	strh	r3, [r4, #12]
 8003e1c:	6126      	str	r6, [r4, #16]
 8003e1e:	444e      	add	r6, r9
 8003e20:	6026      	str	r6, [r4, #0]
 8003e22:	463e      	mov	r6, r7
 8003e24:	6165      	str	r5, [r4, #20]
 8003e26:	eba5 0509 	sub.w	r5, r5, r9
 8003e2a:	60a5      	str	r5, [r4, #8]
 8003e2c:	42be      	cmp	r6, r7
 8003e2e:	d900      	bls.n	8003e32 <__ssputs_r+0x86>
 8003e30:	463e      	mov	r6, r7
 8003e32:	4632      	mov	r2, r6
 8003e34:	4641      	mov	r1, r8
 8003e36:	6820      	ldr	r0, [r4, #0]
 8003e38:	f000 fac6 	bl	80043c8 <memmove>
 8003e3c:	68a3      	ldr	r3, [r4, #8]
 8003e3e:	2000      	movs	r0, #0
 8003e40:	1b9b      	subs	r3, r3, r6
 8003e42:	60a3      	str	r3, [r4, #8]
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	4433      	add	r3, r6
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	e7db      	b.n	8003e04 <__ssputs_r+0x58>
 8003e4c:	462a      	mov	r2, r5
 8003e4e:	f000 fbb1 	bl	80045b4 <_realloc_r>
 8003e52:	4606      	mov	r6, r0
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d1e1      	bne.n	8003e1c <__ssputs_r+0x70>
 8003e58:	4650      	mov	r0, sl
 8003e5a:	6921      	ldr	r1, [r4, #16]
 8003e5c:	f000 face 	bl	80043fc <_free_r>
 8003e60:	e7c7      	b.n	8003df2 <__ssputs_r+0x46>
	...

08003e64 <_svfiprintf_r>:
 8003e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e68:	4698      	mov	r8, r3
 8003e6a:	898b      	ldrh	r3, [r1, #12]
 8003e6c:	4607      	mov	r7, r0
 8003e6e:	061b      	lsls	r3, r3, #24
 8003e70:	460d      	mov	r5, r1
 8003e72:	4614      	mov	r4, r2
 8003e74:	b09d      	sub	sp, #116	; 0x74
 8003e76:	d50e      	bpl.n	8003e96 <_svfiprintf_r+0x32>
 8003e78:	690b      	ldr	r3, [r1, #16]
 8003e7a:	b963      	cbnz	r3, 8003e96 <_svfiprintf_r+0x32>
 8003e7c:	2140      	movs	r1, #64	; 0x40
 8003e7e:	f000 fb25 	bl	80044cc <_malloc_r>
 8003e82:	6028      	str	r0, [r5, #0]
 8003e84:	6128      	str	r0, [r5, #16]
 8003e86:	b920      	cbnz	r0, 8003e92 <_svfiprintf_r+0x2e>
 8003e88:	230c      	movs	r3, #12
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e90:	e0d1      	b.n	8004036 <_svfiprintf_r+0x1d2>
 8003e92:	2340      	movs	r3, #64	; 0x40
 8003e94:	616b      	str	r3, [r5, #20]
 8003e96:	2300      	movs	r3, #0
 8003e98:	9309      	str	r3, [sp, #36]	; 0x24
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ea0:	2330      	movs	r3, #48	; 0x30
 8003ea2:	f04f 0901 	mov.w	r9, #1
 8003ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eaa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004050 <_svfiprintf_r+0x1ec>
 8003eae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	469a      	mov	sl, r3
 8003eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eba:	b10a      	cbz	r2, 8003ec0 <_svfiprintf_r+0x5c>
 8003ebc:	2a25      	cmp	r2, #37	; 0x25
 8003ebe:	d1f9      	bne.n	8003eb4 <_svfiprintf_r+0x50>
 8003ec0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ec4:	d00b      	beq.n	8003ede <_svfiprintf_r+0x7a>
 8003ec6:	465b      	mov	r3, fp
 8003ec8:	4622      	mov	r2, r4
 8003eca:	4629      	mov	r1, r5
 8003ecc:	4638      	mov	r0, r7
 8003ece:	f7ff ff6d 	bl	8003dac <__ssputs_r>
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	f000 80aa 	beq.w	800402c <_svfiprintf_r+0x1c8>
 8003ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eda:	445a      	add	r2, fp
 8003edc:	9209      	str	r2, [sp, #36]	; 0x24
 8003ede:	f89a 3000 	ldrb.w	r3, [sl]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80a2 	beq.w	800402c <_svfiprintf_r+0x1c8>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f04f 32ff 	mov.w	r2, #4294967295
 8003eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ef2:	f10a 0a01 	add.w	sl, sl, #1
 8003ef6:	9304      	str	r3, [sp, #16]
 8003ef8:	9307      	str	r3, [sp, #28]
 8003efa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003efe:	931a      	str	r3, [sp, #104]	; 0x68
 8003f00:	4654      	mov	r4, sl
 8003f02:	2205      	movs	r2, #5
 8003f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f08:	4851      	ldr	r0, [pc, #324]	; (8004050 <_svfiprintf_r+0x1ec>)
 8003f0a:	f000 fa41 	bl	8004390 <memchr>
 8003f0e:	9a04      	ldr	r2, [sp, #16]
 8003f10:	b9d8      	cbnz	r0, 8003f4a <_svfiprintf_r+0xe6>
 8003f12:	06d0      	lsls	r0, r2, #27
 8003f14:	bf44      	itt	mi
 8003f16:	2320      	movmi	r3, #32
 8003f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f1c:	0711      	lsls	r1, r2, #28
 8003f1e:	bf44      	itt	mi
 8003f20:	232b      	movmi	r3, #43	; 0x2b
 8003f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f26:	f89a 3000 	ldrb.w	r3, [sl]
 8003f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f2c:	d015      	beq.n	8003f5a <_svfiprintf_r+0xf6>
 8003f2e:	4654      	mov	r4, sl
 8003f30:	2000      	movs	r0, #0
 8003f32:	f04f 0c0a 	mov.w	ip, #10
 8003f36:	9a07      	ldr	r2, [sp, #28]
 8003f38:	4621      	mov	r1, r4
 8003f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f3e:	3b30      	subs	r3, #48	; 0x30
 8003f40:	2b09      	cmp	r3, #9
 8003f42:	d94e      	bls.n	8003fe2 <_svfiprintf_r+0x17e>
 8003f44:	b1b0      	cbz	r0, 8003f74 <_svfiprintf_r+0x110>
 8003f46:	9207      	str	r2, [sp, #28]
 8003f48:	e014      	b.n	8003f74 <_svfiprintf_r+0x110>
 8003f4a:	eba0 0308 	sub.w	r3, r0, r8
 8003f4e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f52:	4313      	orrs	r3, r2
 8003f54:	46a2      	mov	sl, r4
 8003f56:	9304      	str	r3, [sp, #16]
 8003f58:	e7d2      	b.n	8003f00 <_svfiprintf_r+0x9c>
 8003f5a:	9b03      	ldr	r3, [sp, #12]
 8003f5c:	1d19      	adds	r1, r3, #4
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	9103      	str	r1, [sp, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bfbb      	ittet	lt
 8003f66:	425b      	neglt	r3, r3
 8003f68:	f042 0202 	orrlt.w	r2, r2, #2
 8003f6c:	9307      	strge	r3, [sp, #28]
 8003f6e:	9307      	strlt	r3, [sp, #28]
 8003f70:	bfb8      	it	lt
 8003f72:	9204      	strlt	r2, [sp, #16]
 8003f74:	7823      	ldrb	r3, [r4, #0]
 8003f76:	2b2e      	cmp	r3, #46	; 0x2e
 8003f78:	d10c      	bne.n	8003f94 <_svfiprintf_r+0x130>
 8003f7a:	7863      	ldrb	r3, [r4, #1]
 8003f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f7e:	d135      	bne.n	8003fec <_svfiprintf_r+0x188>
 8003f80:	9b03      	ldr	r3, [sp, #12]
 8003f82:	3402      	adds	r4, #2
 8003f84:	1d1a      	adds	r2, r3, #4
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	9203      	str	r2, [sp, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bfb8      	it	lt
 8003f8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f92:	9305      	str	r3, [sp, #20]
 8003f94:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004054 <_svfiprintf_r+0x1f0>
 8003f98:	2203      	movs	r2, #3
 8003f9a:	4650      	mov	r0, sl
 8003f9c:	7821      	ldrb	r1, [r4, #0]
 8003f9e:	f000 f9f7 	bl	8004390 <memchr>
 8003fa2:	b140      	cbz	r0, 8003fb6 <_svfiprintf_r+0x152>
 8003fa4:	2340      	movs	r3, #64	; 0x40
 8003fa6:	eba0 000a 	sub.w	r0, r0, sl
 8003faa:	fa03 f000 	lsl.w	r0, r3, r0
 8003fae:	9b04      	ldr	r3, [sp, #16]
 8003fb0:	3401      	adds	r4, #1
 8003fb2:	4303      	orrs	r3, r0
 8003fb4:	9304      	str	r3, [sp, #16]
 8003fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fba:	2206      	movs	r2, #6
 8003fbc:	4826      	ldr	r0, [pc, #152]	; (8004058 <_svfiprintf_r+0x1f4>)
 8003fbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fc2:	f000 f9e5 	bl	8004390 <memchr>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d038      	beq.n	800403c <_svfiprintf_r+0x1d8>
 8003fca:	4b24      	ldr	r3, [pc, #144]	; (800405c <_svfiprintf_r+0x1f8>)
 8003fcc:	bb1b      	cbnz	r3, 8004016 <_svfiprintf_r+0x1b2>
 8003fce:	9b03      	ldr	r3, [sp, #12]
 8003fd0:	3307      	adds	r3, #7
 8003fd2:	f023 0307 	bic.w	r3, r3, #7
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	9303      	str	r3, [sp, #12]
 8003fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fdc:	4433      	add	r3, r6
 8003fde:	9309      	str	r3, [sp, #36]	; 0x24
 8003fe0:	e767      	b.n	8003eb2 <_svfiprintf_r+0x4e>
 8003fe2:	460c      	mov	r4, r1
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fea:	e7a5      	b.n	8003f38 <_svfiprintf_r+0xd4>
 8003fec:	2300      	movs	r3, #0
 8003fee:	f04f 0c0a 	mov.w	ip, #10
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	3401      	adds	r4, #1
 8003ff6:	9305      	str	r3, [sp, #20]
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ffe:	3a30      	subs	r2, #48	; 0x30
 8004000:	2a09      	cmp	r2, #9
 8004002:	d903      	bls.n	800400c <_svfiprintf_r+0x1a8>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0c5      	beq.n	8003f94 <_svfiprintf_r+0x130>
 8004008:	9105      	str	r1, [sp, #20]
 800400a:	e7c3      	b.n	8003f94 <_svfiprintf_r+0x130>
 800400c:	4604      	mov	r4, r0
 800400e:	2301      	movs	r3, #1
 8004010:	fb0c 2101 	mla	r1, ip, r1, r2
 8004014:	e7f0      	b.n	8003ff8 <_svfiprintf_r+0x194>
 8004016:	ab03      	add	r3, sp, #12
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	462a      	mov	r2, r5
 800401c:	4638      	mov	r0, r7
 800401e:	4b10      	ldr	r3, [pc, #64]	; (8004060 <_svfiprintf_r+0x1fc>)
 8004020:	a904      	add	r1, sp, #16
 8004022:	f3af 8000 	nop.w
 8004026:	1c42      	adds	r2, r0, #1
 8004028:	4606      	mov	r6, r0
 800402a:	d1d6      	bne.n	8003fda <_svfiprintf_r+0x176>
 800402c:	89ab      	ldrh	r3, [r5, #12]
 800402e:	065b      	lsls	r3, r3, #25
 8004030:	f53f af2c 	bmi.w	8003e8c <_svfiprintf_r+0x28>
 8004034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004036:	b01d      	add	sp, #116	; 0x74
 8004038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800403c:	ab03      	add	r3, sp, #12
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	462a      	mov	r2, r5
 8004042:	4638      	mov	r0, r7
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <_svfiprintf_r+0x1fc>)
 8004046:	a904      	add	r1, sp, #16
 8004048:	f000 f87c 	bl	8004144 <_printf_i>
 800404c:	e7eb      	b.n	8004026 <_svfiprintf_r+0x1c2>
 800404e:	bf00      	nop
 8004050:	080046bc 	.word	0x080046bc
 8004054:	080046c2 	.word	0x080046c2
 8004058:	080046c6 	.word	0x080046c6
 800405c:	00000000 	.word	0x00000000
 8004060:	08003dad 	.word	0x08003dad

08004064 <_printf_common>:
 8004064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	4616      	mov	r6, r2
 800406a:	4699      	mov	r9, r3
 800406c:	688a      	ldr	r2, [r1, #8]
 800406e:	690b      	ldr	r3, [r1, #16]
 8004070:	4607      	mov	r7, r0
 8004072:	4293      	cmp	r3, r2
 8004074:	bfb8      	it	lt
 8004076:	4613      	movlt	r3, r2
 8004078:	6033      	str	r3, [r6, #0]
 800407a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800407e:	460c      	mov	r4, r1
 8004080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004084:	b10a      	cbz	r2, 800408a <_printf_common+0x26>
 8004086:	3301      	adds	r3, #1
 8004088:	6033      	str	r3, [r6, #0]
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	0699      	lsls	r1, r3, #26
 800408e:	bf42      	ittt	mi
 8004090:	6833      	ldrmi	r3, [r6, #0]
 8004092:	3302      	addmi	r3, #2
 8004094:	6033      	strmi	r3, [r6, #0]
 8004096:	6825      	ldr	r5, [r4, #0]
 8004098:	f015 0506 	ands.w	r5, r5, #6
 800409c:	d106      	bne.n	80040ac <_printf_common+0x48>
 800409e:	f104 0a19 	add.w	sl, r4, #25
 80040a2:	68e3      	ldr	r3, [r4, #12]
 80040a4:	6832      	ldr	r2, [r6, #0]
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	42ab      	cmp	r3, r5
 80040aa:	dc28      	bgt.n	80040fe <_printf_common+0x9a>
 80040ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040b0:	1e13      	subs	r3, r2, #0
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	bf18      	it	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	0692      	lsls	r2, r2, #26
 80040ba:	d42d      	bmi.n	8004118 <_printf_common+0xb4>
 80040bc:	4649      	mov	r1, r9
 80040be:	4638      	mov	r0, r7
 80040c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040c4:	47c0      	blx	r8
 80040c6:	3001      	adds	r0, #1
 80040c8:	d020      	beq.n	800410c <_printf_common+0xa8>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	68e5      	ldr	r5, [r4, #12]
 80040ce:	f003 0306 	and.w	r3, r3, #6
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	bf18      	it	ne
 80040d6:	2500      	movne	r5, #0
 80040d8:	6832      	ldr	r2, [r6, #0]
 80040da:	f04f 0600 	mov.w	r6, #0
 80040de:	68a3      	ldr	r3, [r4, #8]
 80040e0:	bf08      	it	eq
 80040e2:	1aad      	subeq	r5, r5, r2
 80040e4:	6922      	ldr	r2, [r4, #16]
 80040e6:	bf08      	it	eq
 80040e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040ec:	4293      	cmp	r3, r2
 80040ee:	bfc4      	itt	gt
 80040f0:	1a9b      	subgt	r3, r3, r2
 80040f2:	18ed      	addgt	r5, r5, r3
 80040f4:	341a      	adds	r4, #26
 80040f6:	42b5      	cmp	r5, r6
 80040f8:	d11a      	bne.n	8004130 <_printf_common+0xcc>
 80040fa:	2000      	movs	r0, #0
 80040fc:	e008      	b.n	8004110 <_printf_common+0xac>
 80040fe:	2301      	movs	r3, #1
 8004100:	4652      	mov	r2, sl
 8004102:	4649      	mov	r1, r9
 8004104:	4638      	mov	r0, r7
 8004106:	47c0      	blx	r8
 8004108:	3001      	adds	r0, #1
 800410a:	d103      	bne.n	8004114 <_printf_common+0xb0>
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004114:	3501      	adds	r5, #1
 8004116:	e7c4      	b.n	80040a2 <_printf_common+0x3e>
 8004118:	2030      	movs	r0, #48	; 0x30
 800411a:	18e1      	adds	r1, r4, r3
 800411c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004126:	4422      	add	r2, r4
 8004128:	3302      	adds	r3, #2
 800412a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800412e:	e7c5      	b.n	80040bc <_printf_common+0x58>
 8004130:	2301      	movs	r3, #1
 8004132:	4622      	mov	r2, r4
 8004134:	4649      	mov	r1, r9
 8004136:	4638      	mov	r0, r7
 8004138:	47c0      	blx	r8
 800413a:	3001      	adds	r0, #1
 800413c:	d0e6      	beq.n	800410c <_printf_common+0xa8>
 800413e:	3601      	adds	r6, #1
 8004140:	e7d9      	b.n	80040f6 <_printf_common+0x92>
	...

08004144 <_printf_i>:
 8004144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004148:	7e0f      	ldrb	r7, [r1, #24]
 800414a:	4691      	mov	r9, r2
 800414c:	2f78      	cmp	r7, #120	; 0x78
 800414e:	4680      	mov	r8, r0
 8004150:	460c      	mov	r4, r1
 8004152:	469a      	mov	sl, r3
 8004154:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800415a:	d807      	bhi.n	800416c <_printf_i+0x28>
 800415c:	2f62      	cmp	r7, #98	; 0x62
 800415e:	d80a      	bhi.n	8004176 <_printf_i+0x32>
 8004160:	2f00      	cmp	r7, #0
 8004162:	f000 80d9 	beq.w	8004318 <_printf_i+0x1d4>
 8004166:	2f58      	cmp	r7, #88	; 0x58
 8004168:	f000 80a4 	beq.w	80042b4 <_printf_i+0x170>
 800416c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004174:	e03a      	b.n	80041ec <_printf_i+0xa8>
 8004176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800417a:	2b15      	cmp	r3, #21
 800417c:	d8f6      	bhi.n	800416c <_printf_i+0x28>
 800417e:	a101      	add	r1, pc, #4	; (adr r1, 8004184 <_printf_i+0x40>)
 8004180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004184:	080041dd 	.word	0x080041dd
 8004188:	080041f1 	.word	0x080041f1
 800418c:	0800416d 	.word	0x0800416d
 8004190:	0800416d 	.word	0x0800416d
 8004194:	0800416d 	.word	0x0800416d
 8004198:	0800416d 	.word	0x0800416d
 800419c:	080041f1 	.word	0x080041f1
 80041a0:	0800416d 	.word	0x0800416d
 80041a4:	0800416d 	.word	0x0800416d
 80041a8:	0800416d 	.word	0x0800416d
 80041ac:	0800416d 	.word	0x0800416d
 80041b0:	080042ff 	.word	0x080042ff
 80041b4:	08004221 	.word	0x08004221
 80041b8:	080042e1 	.word	0x080042e1
 80041bc:	0800416d 	.word	0x0800416d
 80041c0:	0800416d 	.word	0x0800416d
 80041c4:	08004321 	.word	0x08004321
 80041c8:	0800416d 	.word	0x0800416d
 80041cc:	08004221 	.word	0x08004221
 80041d0:	0800416d 	.word	0x0800416d
 80041d4:	0800416d 	.word	0x0800416d
 80041d8:	080042e9 	.word	0x080042e9
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	1d1a      	adds	r2, r3, #4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	602a      	str	r2, [r5, #0]
 80041e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0a4      	b.n	800433a <_printf_i+0x1f6>
 80041f0:	6820      	ldr	r0, [r4, #0]
 80041f2:	6829      	ldr	r1, [r5, #0]
 80041f4:	0606      	lsls	r6, r0, #24
 80041f6:	f101 0304 	add.w	r3, r1, #4
 80041fa:	d50a      	bpl.n	8004212 <_printf_i+0xce>
 80041fc:	680e      	ldr	r6, [r1, #0]
 80041fe:	602b      	str	r3, [r5, #0]
 8004200:	2e00      	cmp	r6, #0
 8004202:	da03      	bge.n	800420c <_printf_i+0xc8>
 8004204:	232d      	movs	r3, #45	; 0x2d
 8004206:	4276      	negs	r6, r6
 8004208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800420c:	230a      	movs	r3, #10
 800420e:	485e      	ldr	r0, [pc, #376]	; (8004388 <_printf_i+0x244>)
 8004210:	e019      	b.n	8004246 <_printf_i+0x102>
 8004212:	680e      	ldr	r6, [r1, #0]
 8004214:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004218:	602b      	str	r3, [r5, #0]
 800421a:	bf18      	it	ne
 800421c:	b236      	sxthne	r6, r6
 800421e:	e7ef      	b.n	8004200 <_printf_i+0xbc>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	6820      	ldr	r0, [r4, #0]
 8004224:	1d19      	adds	r1, r3, #4
 8004226:	6029      	str	r1, [r5, #0]
 8004228:	0601      	lsls	r1, r0, #24
 800422a:	d501      	bpl.n	8004230 <_printf_i+0xec>
 800422c:	681e      	ldr	r6, [r3, #0]
 800422e:	e002      	b.n	8004236 <_printf_i+0xf2>
 8004230:	0646      	lsls	r6, r0, #25
 8004232:	d5fb      	bpl.n	800422c <_printf_i+0xe8>
 8004234:	881e      	ldrh	r6, [r3, #0]
 8004236:	2f6f      	cmp	r7, #111	; 0x6f
 8004238:	bf0c      	ite	eq
 800423a:	2308      	moveq	r3, #8
 800423c:	230a      	movne	r3, #10
 800423e:	4852      	ldr	r0, [pc, #328]	; (8004388 <_printf_i+0x244>)
 8004240:	2100      	movs	r1, #0
 8004242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004246:	6865      	ldr	r5, [r4, #4]
 8004248:	2d00      	cmp	r5, #0
 800424a:	bfa8      	it	ge
 800424c:	6821      	ldrge	r1, [r4, #0]
 800424e:	60a5      	str	r5, [r4, #8]
 8004250:	bfa4      	itt	ge
 8004252:	f021 0104 	bicge.w	r1, r1, #4
 8004256:	6021      	strge	r1, [r4, #0]
 8004258:	b90e      	cbnz	r6, 800425e <_printf_i+0x11a>
 800425a:	2d00      	cmp	r5, #0
 800425c:	d04d      	beq.n	80042fa <_printf_i+0x1b6>
 800425e:	4615      	mov	r5, r2
 8004260:	fbb6 f1f3 	udiv	r1, r6, r3
 8004264:	fb03 6711 	mls	r7, r3, r1, r6
 8004268:	5dc7      	ldrb	r7, [r0, r7]
 800426a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800426e:	4637      	mov	r7, r6
 8004270:	42bb      	cmp	r3, r7
 8004272:	460e      	mov	r6, r1
 8004274:	d9f4      	bls.n	8004260 <_printf_i+0x11c>
 8004276:	2b08      	cmp	r3, #8
 8004278:	d10b      	bne.n	8004292 <_printf_i+0x14e>
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	07de      	lsls	r6, r3, #31
 800427e:	d508      	bpl.n	8004292 <_printf_i+0x14e>
 8004280:	6923      	ldr	r3, [r4, #16]
 8004282:	6861      	ldr	r1, [r4, #4]
 8004284:	4299      	cmp	r1, r3
 8004286:	bfde      	ittt	le
 8004288:	2330      	movle	r3, #48	; 0x30
 800428a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800428e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004292:	1b52      	subs	r2, r2, r5
 8004294:	6122      	str	r2, [r4, #16]
 8004296:	464b      	mov	r3, r9
 8004298:	4621      	mov	r1, r4
 800429a:	4640      	mov	r0, r8
 800429c:	f8cd a000 	str.w	sl, [sp]
 80042a0:	aa03      	add	r2, sp, #12
 80042a2:	f7ff fedf 	bl	8004064 <_printf_common>
 80042a6:	3001      	adds	r0, #1
 80042a8:	d14c      	bne.n	8004344 <_printf_i+0x200>
 80042aa:	f04f 30ff 	mov.w	r0, #4294967295
 80042ae:	b004      	add	sp, #16
 80042b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b4:	4834      	ldr	r0, [pc, #208]	; (8004388 <_printf_i+0x244>)
 80042b6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042ba:	6829      	ldr	r1, [r5, #0]
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	f851 6b04 	ldr.w	r6, [r1], #4
 80042c2:	6029      	str	r1, [r5, #0]
 80042c4:	061d      	lsls	r5, r3, #24
 80042c6:	d514      	bpl.n	80042f2 <_printf_i+0x1ae>
 80042c8:	07df      	lsls	r7, r3, #31
 80042ca:	bf44      	itt	mi
 80042cc:	f043 0320 	orrmi.w	r3, r3, #32
 80042d0:	6023      	strmi	r3, [r4, #0]
 80042d2:	b91e      	cbnz	r6, 80042dc <_printf_i+0x198>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	f023 0320 	bic.w	r3, r3, #32
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	2310      	movs	r3, #16
 80042de:	e7af      	b.n	8004240 <_printf_i+0xfc>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	f043 0320 	orr.w	r3, r3, #32
 80042e6:	6023      	str	r3, [r4, #0]
 80042e8:	2378      	movs	r3, #120	; 0x78
 80042ea:	4828      	ldr	r0, [pc, #160]	; (800438c <_printf_i+0x248>)
 80042ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042f0:	e7e3      	b.n	80042ba <_printf_i+0x176>
 80042f2:	0659      	lsls	r1, r3, #25
 80042f4:	bf48      	it	mi
 80042f6:	b2b6      	uxthmi	r6, r6
 80042f8:	e7e6      	b.n	80042c8 <_printf_i+0x184>
 80042fa:	4615      	mov	r5, r2
 80042fc:	e7bb      	b.n	8004276 <_printf_i+0x132>
 80042fe:	682b      	ldr	r3, [r5, #0]
 8004300:	6826      	ldr	r6, [r4, #0]
 8004302:	1d18      	adds	r0, r3, #4
 8004304:	6961      	ldr	r1, [r4, #20]
 8004306:	6028      	str	r0, [r5, #0]
 8004308:	0635      	lsls	r5, r6, #24
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	d501      	bpl.n	8004312 <_printf_i+0x1ce>
 800430e:	6019      	str	r1, [r3, #0]
 8004310:	e002      	b.n	8004318 <_printf_i+0x1d4>
 8004312:	0670      	lsls	r0, r6, #25
 8004314:	d5fb      	bpl.n	800430e <_printf_i+0x1ca>
 8004316:	8019      	strh	r1, [r3, #0]
 8004318:	2300      	movs	r3, #0
 800431a:	4615      	mov	r5, r2
 800431c:	6123      	str	r3, [r4, #16]
 800431e:	e7ba      	b.n	8004296 <_printf_i+0x152>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	2100      	movs	r1, #0
 8004324:	1d1a      	adds	r2, r3, #4
 8004326:	602a      	str	r2, [r5, #0]
 8004328:	681d      	ldr	r5, [r3, #0]
 800432a:	6862      	ldr	r2, [r4, #4]
 800432c:	4628      	mov	r0, r5
 800432e:	f000 f82f 	bl	8004390 <memchr>
 8004332:	b108      	cbz	r0, 8004338 <_printf_i+0x1f4>
 8004334:	1b40      	subs	r0, r0, r5
 8004336:	6060      	str	r0, [r4, #4]
 8004338:	6863      	ldr	r3, [r4, #4]
 800433a:	6123      	str	r3, [r4, #16]
 800433c:	2300      	movs	r3, #0
 800433e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004342:	e7a8      	b.n	8004296 <_printf_i+0x152>
 8004344:	462a      	mov	r2, r5
 8004346:	4649      	mov	r1, r9
 8004348:	4640      	mov	r0, r8
 800434a:	6923      	ldr	r3, [r4, #16]
 800434c:	47d0      	blx	sl
 800434e:	3001      	adds	r0, #1
 8004350:	d0ab      	beq.n	80042aa <_printf_i+0x166>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	079b      	lsls	r3, r3, #30
 8004356:	d413      	bmi.n	8004380 <_printf_i+0x23c>
 8004358:	68e0      	ldr	r0, [r4, #12]
 800435a:	9b03      	ldr	r3, [sp, #12]
 800435c:	4298      	cmp	r0, r3
 800435e:	bfb8      	it	lt
 8004360:	4618      	movlt	r0, r3
 8004362:	e7a4      	b.n	80042ae <_printf_i+0x16a>
 8004364:	2301      	movs	r3, #1
 8004366:	4632      	mov	r2, r6
 8004368:	4649      	mov	r1, r9
 800436a:	4640      	mov	r0, r8
 800436c:	47d0      	blx	sl
 800436e:	3001      	adds	r0, #1
 8004370:	d09b      	beq.n	80042aa <_printf_i+0x166>
 8004372:	3501      	adds	r5, #1
 8004374:	68e3      	ldr	r3, [r4, #12]
 8004376:	9903      	ldr	r1, [sp, #12]
 8004378:	1a5b      	subs	r3, r3, r1
 800437a:	42ab      	cmp	r3, r5
 800437c:	dcf2      	bgt.n	8004364 <_printf_i+0x220>
 800437e:	e7eb      	b.n	8004358 <_printf_i+0x214>
 8004380:	2500      	movs	r5, #0
 8004382:	f104 0619 	add.w	r6, r4, #25
 8004386:	e7f5      	b.n	8004374 <_printf_i+0x230>
 8004388:	080046cd 	.word	0x080046cd
 800438c:	080046de 	.word	0x080046de

08004390 <memchr>:
 8004390:	4603      	mov	r3, r0
 8004392:	b510      	push	{r4, lr}
 8004394:	b2c9      	uxtb	r1, r1
 8004396:	4402      	add	r2, r0
 8004398:	4293      	cmp	r3, r2
 800439a:	4618      	mov	r0, r3
 800439c:	d101      	bne.n	80043a2 <memchr+0x12>
 800439e:	2000      	movs	r0, #0
 80043a0:	e003      	b.n	80043aa <memchr+0x1a>
 80043a2:	7804      	ldrb	r4, [r0, #0]
 80043a4:	3301      	adds	r3, #1
 80043a6:	428c      	cmp	r4, r1
 80043a8:	d1f6      	bne.n	8004398 <memchr+0x8>
 80043aa:	bd10      	pop	{r4, pc}

080043ac <memcpy>:
 80043ac:	440a      	add	r2, r1
 80043ae:	4291      	cmp	r1, r2
 80043b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80043b4:	d100      	bne.n	80043b8 <memcpy+0xc>
 80043b6:	4770      	bx	lr
 80043b8:	b510      	push	{r4, lr}
 80043ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043be:	4291      	cmp	r1, r2
 80043c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043c4:	d1f9      	bne.n	80043ba <memcpy+0xe>
 80043c6:	bd10      	pop	{r4, pc}

080043c8 <memmove>:
 80043c8:	4288      	cmp	r0, r1
 80043ca:	b510      	push	{r4, lr}
 80043cc:	eb01 0402 	add.w	r4, r1, r2
 80043d0:	d902      	bls.n	80043d8 <memmove+0x10>
 80043d2:	4284      	cmp	r4, r0
 80043d4:	4623      	mov	r3, r4
 80043d6:	d807      	bhi.n	80043e8 <memmove+0x20>
 80043d8:	1e43      	subs	r3, r0, #1
 80043da:	42a1      	cmp	r1, r4
 80043dc:	d008      	beq.n	80043f0 <memmove+0x28>
 80043de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043e6:	e7f8      	b.n	80043da <memmove+0x12>
 80043e8:	4601      	mov	r1, r0
 80043ea:	4402      	add	r2, r0
 80043ec:	428a      	cmp	r2, r1
 80043ee:	d100      	bne.n	80043f2 <memmove+0x2a>
 80043f0:	bd10      	pop	{r4, pc}
 80043f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043fa:	e7f7      	b.n	80043ec <memmove+0x24>

080043fc <_free_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4605      	mov	r5, r0
 8004400:	2900      	cmp	r1, #0
 8004402:	d040      	beq.n	8004486 <_free_r+0x8a>
 8004404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004408:	1f0c      	subs	r4, r1, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	bfb8      	it	lt
 800440e:	18e4      	addlt	r4, r4, r3
 8004410:	f000 f910 	bl	8004634 <__malloc_lock>
 8004414:	4a1c      	ldr	r2, [pc, #112]	; (8004488 <_free_r+0x8c>)
 8004416:	6813      	ldr	r3, [r2, #0]
 8004418:	b933      	cbnz	r3, 8004428 <_free_r+0x2c>
 800441a:	6063      	str	r3, [r4, #4]
 800441c:	6014      	str	r4, [r2, #0]
 800441e:	4628      	mov	r0, r5
 8004420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004424:	f000 b90c 	b.w	8004640 <__malloc_unlock>
 8004428:	42a3      	cmp	r3, r4
 800442a:	d908      	bls.n	800443e <_free_r+0x42>
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	1821      	adds	r1, r4, r0
 8004430:	428b      	cmp	r3, r1
 8004432:	bf01      	itttt	eq
 8004434:	6819      	ldreq	r1, [r3, #0]
 8004436:	685b      	ldreq	r3, [r3, #4]
 8004438:	1809      	addeq	r1, r1, r0
 800443a:	6021      	streq	r1, [r4, #0]
 800443c:	e7ed      	b.n	800441a <_free_r+0x1e>
 800443e:	461a      	mov	r2, r3
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	b10b      	cbz	r3, 8004448 <_free_r+0x4c>
 8004444:	42a3      	cmp	r3, r4
 8004446:	d9fa      	bls.n	800443e <_free_r+0x42>
 8004448:	6811      	ldr	r1, [r2, #0]
 800444a:	1850      	adds	r0, r2, r1
 800444c:	42a0      	cmp	r0, r4
 800444e:	d10b      	bne.n	8004468 <_free_r+0x6c>
 8004450:	6820      	ldr	r0, [r4, #0]
 8004452:	4401      	add	r1, r0
 8004454:	1850      	adds	r0, r2, r1
 8004456:	4283      	cmp	r3, r0
 8004458:	6011      	str	r1, [r2, #0]
 800445a:	d1e0      	bne.n	800441e <_free_r+0x22>
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4401      	add	r1, r0
 8004462:	6011      	str	r1, [r2, #0]
 8004464:	6053      	str	r3, [r2, #4]
 8004466:	e7da      	b.n	800441e <_free_r+0x22>
 8004468:	d902      	bls.n	8004470 <_free_r+0x74>
 800446a:	230c      	movs	r3, #12
 800446c:	602b      	str	r3, [r5, #0]
 800446e:	e7d6      	b.n	800441e <_free_r+0x22>
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	1821      	adds	r1, r4, r0
 8004474:	428b      	cmp	r3, r1
 8004476:	bf01      	itttt	eq
 8004478:	6819      	ldreq	r1, [r3, #0]
 800447a:	685b      	ldreq	r3, [r3, #4]
 800447c:	1809      	addeq	r1, r1, r0
 800447e:	6021      	streq	r1, [r4, #0]
 8004480:	6063      	str	r3, [r4, #4]
 8004482:	6054      	str	r4, [r2, #4]
 8004484:	e7cb      	b.n	800441e <_free_r+0x22>
 8004486:	bd38      	pop	{r3, r4, r5, pc}
 8004488:	2000050c 	.word	0x2000050c

0800448c <sbrk_aligned>:
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	4e0e      	ldr	r6, [pc, #56]	; (80044c8 <sbrk_aligned+0x3c>)
 8004490:	460c      	mov	r4, r1
 8004492:	6831      	ldr	r1, [r6, #0]
 8004494:	4605      	mov	r5, r0
 8004496:	b911      	cbnz	r1, 800449e <sbrk_aligned+0x12>
 8004498:	f000 f8bc 	bl	8004614 <_sbrk_r>
 800449c:	6030      	str	r0, [r6, #0]
 800449e:	4621      	mov	r1, r4
 80044a0:	4628      	mov	r0, r5
 80044a2:	f000 f8b7 	bl	8004614 <_sbrk_r>
 80044a6:	1c43      	adds	r3, r0, #1
 80044a8:	d00a      	beq.n	80044c0 <sbrk_aligned+0x34>
 80044aa:	1cc4      	adds	r4, r0, #3
 80044ac:	f024 0403 	bic.w	r4, r4, #3
 80044b0:	42a0      	cmp	r0, r4
 80044b2:	d007      	beq.n	80044c4 <sbrk_aligned+0x38>
 80044b4:	1a21      	subs	r1, r4, r0
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 f8ac 	bl	8004614 <_sbrk_r>
 80044bc:	3001      	adds	r0, #1
 80044be:	d101      	bne.n	80044c4 <sbrk_aligned+0x38>
 80044c0:	f04f 34ff 	mov.w	r4, #4294967295
 80044c4:	4620      	mov	r0, r4
 80044c6:	bd70      	pop	{r4, r5, r6, pc}
 80044c8:	20000510 	.word	0x20000510

080044cc <_malloc_r>:
 80044cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d0:	1ccd      	adds	r5, r1, #3
 80044d2:	f025 0503 	bic.w	r5, r5, #3
 80044d6:	3508      	adds	r5, #8
 80044d8:	2d0c      	cmp	r5, #12
 80044da:	bf38      	it	cc
 80044dc:	250c      	movcc	r5, #12
 80044de:	2d00      	cmp	r5, #0
 80044e0:	4607      	mov	r7, r0
 80044e2:	db01      	blt.n	80044e8 <_malloc_r+0x1c>
 80044e4:	42a9      	cmp	r1, r5
 80044e6:	d905      	bls.n	80044f4 <_malloc_r+0x28>
 80044e8:	230c      	movs	r3, #12
 80044ea:	2600      	movs	r6, #0
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	4630      	mov	r0, r6
 80044f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f4:	4e2e      	ldr	r6, [pc, #184]	; (80045b0 <_malloc_r+0xe4>)
 80044f6:	f000 f89d 	bl	8004634 <__malloc_lock>
 80044fa:	6833      	ldr	r3, [r6, #0]
 80044fc:	461c      	mov	r4, r3
 80044fe:	bb34      	cbnz	r4, 800454e <_malloc_r+0x82>
 8004500:	4629      	mov	r1, r5
 8004502:	4638      	mov	r0, r7
 8004504:	f7ff ffc2 	bl	800448c <sbrk_aligned>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	4604      	mov	r4, r0
 800450c:	d14d      	bne.n	80045aa <_malloc_r+0xde>
 800450e:	6834      	ldr	r4, [r6, #0]
 8004510:	4626      	mov	r6, r4
 8004512:	2e00      	cmp	r6, #0
 8004514:	d140      	bne.n	8004598 <_malloc_r+0xcc>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	4631      	mov	r1, r6
 800451a:	4638      	mov	r0, r7
 800451c:	eb04 0803 	add.w	r8, r4, r3
 8004520:	f000 f878 	bl	8004614 <_sbrk_r>
 8004524:	4580      	cmp	r8, r0
 8004526:	d13a      	bne.n	800459e <_malloc_r+0xd2>
 8004528:	6821      	ldr	r1, [r4, #0]
 800452a:	3503      	adds	r5, #3
 800452c:	1a6d      	subs	r5, r5, r1
 800452e:	f025 0503 	bic.w	r5, r5, #3
 8004532:	3508      	adds	r5, #8
 8004534:	2d0c      	cmp	r5, #12
 8004536:	bf38      	it	cc
 8004538:	250c      	movcc	r5, #12
 800453a:	4638      	mov	r0, r7
 800453c:	4629      	mov	r1, r5
 800453e:	f7ff ffa5 	bl	800448c <sbrk_aligned>
 8004542:	3001      	adds	r0, #1
 8004544:	d02b      	beq.n	800459e <_malloc_r+0xd2>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	442b      	add	r3, r5
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	e00e      	b.n	800456c <_malloc_r+0xa0>
 800454e:	6822      	ldr	r2, [r4, #0]
 8004550:	1b52      	subs	r2, r2, r5
 8004552:	d41e      	bmi.n	8004592 <_malloc_r+0xc6>
 8004554:	2a0b      	cmp	r2, #11
 8004556:	d916      	bls.n	8004586 <_malloc_r+0xba>
 8004558:	1961      	adds	r1, r4, r5
 800455a:	42a3      	cmp	r3, r4
 800455c:	6025      	str	r5, [r4, #0]
 800455e:	bf18      	it	ne
 8004560:	6059      	strne	r1, [r3, #4]
 8004562:	6863      	ldr	r3, [r4, #4]
 8004564:	bf08      	it	eq
 8004566:	6031      	streq	r1, [r6, #0]
 8004568:	5162      	str	r2, [r4, r5]
 800456a:	604b      	str	r3, [r1, #4]
 800456c:	4638      	mov	r0, r7
 800456e:	f104 060b 	add.w	r6, r4, #11
 8004572:	f000 f865 	bl	8004640 <__malloc_unlock>
 8004576:	f026 0607 	bic.w	r6, r6, #7
 800457a:	1d23      	adds	r3, r4, #4
 800457c:	1af2      	subs	r2, r6, r3
 800457e:	d0b6      	beq.n	80044ee <_malloc_r+0x22>
 8004580:	1b9b      	subs	r3, r3, r6
 8004582:	50a3      	str	r3, [r4, r2]
 8004584:	e7b3      	b.n	80044ee <_malloc_r+0x22>
 8004586:	6862      	ldr	r2, [r4, #4]
 8004588:	42a3      	cmp	r3, r4
 800458a:	bf0c      	ite	eq
 800458c:	6032      	streq	r2, [r6, #0]
 800458e:	605a      	strne	r2, [r3, #4]
 8004590:	e7ec      	b.n	800456c <_malloc_r+0xa0>
 8004592:	4623      	mov	r3, r4
 8004594:	6864      	ldr	r4, [r4, #4]
 8004596:	e7b2      	b.n	80044fe <_malloc_r+0x32>
 8004598:	4634      	mov	r4, r6
 800459a:	6876      	ldr	r6, [r6, #4]
 800459c:	e7b9      	b.n	8004512 <_malloc_r+0x46>
 800459e:	230c      	movs	r3, #12
 80045a0:	4638      	mov	r0, r7
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	f000 f84c 	bl	8004640 <__malloc_unlock>
 80045a8:	e7a1      	b.n	80044ee <_malloc_r+0x22>
 80045aa:	6025      	str	r5, [r4, #0]
 80045ac:	e7de      	b.n	800456c <_malloc_r+0xa0>
 80045ae:	bf00      	nop
 80045b0:	2000050c 	.word	0x2000050c

080045b4 <_realloc_r>:
 80045b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b8:	4680      	mov	r8, r0
 80045ba:	4614      	mov	r4, r2
 80045bc:	460e      	mov	r6, r1
 80045be:	b921      	cbnz	r1, 80045ca <_realloc_r+0x16>
 80045c0:	4611      	mov	r1, r2
 80045c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045c6:	f7ff bf81 	b.w	80044cc <_malloc_r>
 80045ca:	b92a      	cbnz	r2, 80045d8 <_realloc_r+0x24>
 80045cc:	f7ff ff16 	bl	80043fc <_free_r>
 80045d0:	4625      	mov	r5, r4
 80045d2:	4628      	mov	r0, r5
 80045d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045d8:	f000 f838 	bl	800464c <_malloc_usable_size_r>
 80045dc:	4284      	cmp	r4, r0
 80045de:	4607      	mov	r7, r0
 80045e0:	d802      	bhi.n	80045e8 <_realloc_r+0x34>
 80045e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045e6:	d812      	bhi.n	800460e <_realloc_r+0x5a>
 80045e8:	4621      	mov	r1, r4
 80045ea:	4640      	mov	r0, r8
 80045ec:	f7ff ff6e 	bl	80044cc <_malloc_r>
 80045f0:	4605      	mov	r5, r0
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d0ed      	beq.n	80045d2 <_realloc_r+0x1e>
 80045f6:	42bc      	cmp	r4, r7
 80045f8:	4622      	mov	r2, r4
 80045fa:	4631      	mov	r1, r6
 80045fc:	bf28      	it	cs
 80045fe:	463a      	movcs	r2, r7
 8004600:	f7ff fed4 	bl	80043ac <memcpy>
 8004604:	4631      	mov	r1, r6
 8004606:	4640      	mov	r0, r8
 8004608:	f7ff fef8 	bl	80043fc <_free_r>
 800460c:	e7e1      	b.n	80045d2 <_realloc_r+0x1e>
 800460e:	4635      	mov	r5, r6
 8004610:	e7df      	b.n	80045d2 <_realloc_r+0x1e>
	...

08004614 <_sbrk_r>:
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	2300      	movs	r3, #0
 8004618:	4d05      	ldr	r5, [pc, #20]	; (8004630 <_sbrk_r+0x1c>)
 800461a:	4604      	mov	r4, r0
 800461c:	4608      	mov	r0, r1
 800461e:	602b      	str	r3, [r5, #0]
 8004620:	f7fc feec 	bl	80013fc <_sbrk>
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	d102      	bne.n	800462e <_sbrk_r+0x1a>
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	b103      	cbz	r3, 800462e <_sbrk_r+0x1a>
 800462c:	6023      	str	r3, [r4, #0]
 800462e:	bd38      	pop	{r3, r4, r5, pc}
 8004630:	20000514 	.word	0x20000514

08004634 <__malloc_lock>:
 8004634:	4801      	ldr	r0, [pc, #4]	; (800463c <__malloc_lock+0x8>)
 8004636:	f000 b811 	b.w	800465c <__retarget_lock_acquire_recursive>
 800463a:	bf00      	nop
 800463c:	20000518 	.word	0x20000518

08004640 <__malloc_unlock>:
 8004640:	4801      	ldr	r0, [pc, #4]	; (8004648 <__malloc_unlock+0x8>)
 8004642:	f000 b80c 	b.w	800465e <__retarget_lock_release_recursive>
 8004646:	bf00      	nop
 8004648:	20000518 	.word	0x20000518

0800464c <_malloc_usable_size_r>:
 800464c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004650:	1f18      	subs	r0, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	bfbc      	itt	lt
 8004656:	580b      	ldrlt	r3, [r1, r0]
 8004658:	18c0      	addlt	r0, r0, r3
 800465a:	4770      	bx	lr

0800465c <__retarget_lock_acquire_recursive>:
 800465c:	4770      	bx	lr

0800465e <__retarget_lock_release_recursive>:
 800465e:	4770      	bx	lr

08004660 <_init>:
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	bf00      	nop
 8004664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004666:	bc08      	pop	{r3}
 8004668:	469e      	mov	lr, r3
 800466a:	4770      	bx	lr

0800466c <_fini>:
 800466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466e:	bf00      	nop
 8004670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004672:	bc08      	pop	{r3}
 8004674:	469e      	mov	lr, r3
 8004676:	4770      	bx	lr
